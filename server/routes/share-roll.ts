import { RequestHandler } from "express";

export interface ShareRollRequest {
  characterName: string;
  rollDescription: string;
  dice: string;
  modifier: number;
  result: number;
  diceRoll: number;
  type: string;
  individualRolls?: number[];
  separateRolls?: Array<{
    name: string;
    dice: string;
    diceRoll: number;
    modifier: number;
    result: number;
    individualRolls?: number[];
    damageType?: string;
  }>;
  platform: 'telegram' | 'vk';
  chatId?: string; // –¥–ª—è Telegram
  userId?: string; // –¥–ª—è VK
}

export interface ShareRollResponse {
  success: boolean;
  message?: string;
  error?: string;
}

// Telegram Bot API endpoint
export const shareToTelegram: RequestHandler = async (req, res) => {
  try {
    const { rollData, chatId, messageThreadId } = req.body;
    
    if (!rollData || !chatId) {
      return res.status(400).json({ success: false, error: 'Roll data and chat ID are required for Telegram' });
    }
    
    const { characterName, description, dice, modifier, result, diceRoll, type, individualRolls, separateRolls } = rollData;

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const message = formatRollMessage(characterName, description, dice, modifier, result, diceRoll, type, individualRolls, separateRolls);
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à Telegram Bot Token
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    if (!botToken) {
      // –î–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      console.log('üé≤ DEMO MODE: Telegram message would be sent:');
      console.log(`üì± To: ${chatId}`);
      console.log(`üí¨ Message: ${message}`);
      return res.json({ 
        success: true, 
        message: 'DEMO: Roll result would be shared to Telegram successfully',
        demo: true
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
    const messagePayload: any = {
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML'
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º message_thread_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω (–¥–ª—è —Ç–æ–ø–∏–∫–æ–≤)
    if (messageThreadId) {
      messagePayload.message_thread_id = messageThreadId;
    }
    
    const telegramResponse = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
      },
      body: JSON.stringify(messagePayload)
    });

    if (!telegramResponse.ok) {
      throw new Error('Failed to send message to Telegram');
    }

    res.json({ success: true, message: 'Roll result shared to Telegram successfully' });
  } catch (error) {
    console.error('Telegram sharing error:', error);
    res.status(500).json({ success: false, error: 'Failed to share to Telegram' });
  }
};

// VKontakte API endpoint
export const shareToVK: RequestHandler = async (req, res) => {
  try {
    const { rollData, userId } = req.body;
    
    if (!rollData || !userId) {
      return res.status(400).json({ success: false, error: 'Roll data and user ID are required for VK' });
    }
    
    const { characterName, description, dice, modifier, result, diceRoll, type, individualRolls, separateRolls } = rollData;

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è VK
    const message = formatRollMessage(characterName, description, dice, modifier, result, diceRoll, type, individualRolls, separateRolls);
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à VK Access Token
    const vkToken = process.env.VK_ACCESS_TOKEN;
    if (!vkToken) {
      // –î–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      console.log('üé≤ DEMO MODE: VK message would be sent:');
      console.log(`üë§ To: ${userId}`);
      console.log(`üí¨ Message: ${message}`);
      return res.json({ 
        success: true, 
        message: 'DEMO: Roll result would be shared to VK successfully',
        demo: true
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ VK API
    const vkResponse = await fetch('https://api.vk.com/method/messages.send', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        access_token: vkToken,
        user_id: userId,
        message: message,
        v: '5.131'
      })
    });

    const vkData = await vkResponse.json();
    
    if (vkData.error) {
      throw new Error(vkData.error.error_msg);
    }

    res.json({ success: true, message: 'Roll result shared to VK successfully' });
  } catch (error) {
    console.error('VK sharing error:', error);
    res.status(500).json({ success: false, error: 'Failed to share to VK' });
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±—Ä–æ—Å–∫–µ
function formatRollMessage(
  characterName: string,
  rollDescription: string,
  dice: string,
  modifier: number,
  result: number,
  diceRoll: number,
  type: string,
  individualRolls?: number[],
  separateRolls?: Array<{
    name: string;
    dice: string;
    diceRoll: number;
    modifier: number;
    result: number;
    individualRolls?: number[];
    damageType?: string;
  }>
): string {
  const actionType = getActionTypeText(type);
  const modifierText = modifier !== 0 ? (modifier > 0 ? `+${modifier}` : `${modifier}`) : '';
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±—Ä–æ—Å–∫–∏ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —É—Ä–æ–Ω–∞), —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ö
  if (separateRolls && separateRolls.length > 0) {
    const actionEmoji = getActionEmoji(type);
    const separator = '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ';
    
    let message = `${actionEmoji} <b>${characterName}</b> ${getActionVerb(type)}: <i>${rollDescription}</i>\n\n${separator}\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —É—Ä–æ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    separateRolls.forEach((roll, index) => {
      const rollModifierText = roll.modifier !== 0 ? (roll.modifier > 0 ? `+${roll.modifier}` : `${roll.modifier}`) : '';
      let rollCalculationText = '';
      
      if (roll.individualRolls && roll.individualRolls.length > 0) {
        rollCalculationText = `${roll.individualRolls.join('+')}${rollModifierText}`;
      } else {
        rollCalculationText = `${roll.diceRoll}${rollModifierText}`;
      }
      
      const damageTypeText = roll.damageType ? ` (${roll.damageType})` : '';
      message += `üé≤ <b>${roll.name}${damageTypeText}:</b> <code>${roll.dice}</code>\n`;
      message += `üî¢ <b>–ë—Ä–æ—Å–æ–∫:</b> <code>${rollCalculationText}</code>\n`;
      message += `üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> <code>${roll.result}</code>\n`;
      
      if (index < separateRolls.length - 1) {
        message += `\n`;
      }
    });
    
    message += `\n${separator}\n`;
    message += `üìä <b>–û–±—â–∏–π —É—Ä–æ–Ω:</b> <code>${result}</code>`;
    
    return message;
  }
  
  // –û–±—ã—á–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –±—Ä–æ—Å–∫–æ–≤
  let calculationText = '';
  if (individualRolls && individualRolls.length > 0) {
    calculationText = `${individualRolls.join('+')}${modifierText}`;
  } else {
    calculationText = `${diceRoll}${modifierText}`;
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è d20
  let specialResult = '';
  if (dice === 'd20' && diceRoll === 20) {
    specialResult = '\nüéâ <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•!</b>';
  } else if (dice === 'd20' && diceRoll === 1) {
    specialResult = '\nüíÄ <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–í–ê–õ!</b>';
  }

  // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
  const actionEmoji = getActionEmoji(type);
  
  // –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
  const separator = '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ';
  
  return `${actionEmoji} <b>${characterName}</b> ${getActionVerb(type)}: <i>${rollDescription}</i>

${separator}
üé≤ <b>–ö–æ—Å—Ç—å:</b> <code>${dice}</code>
üî¢ <b>–ë—Ä–æ—Å–æ–∫:</b> <code>${calculationText}</code>
üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> <code>${result}</code>${specialResult}
${separator}`;
}

function getActionTypeText(type: string): string {
  switch (type) {
    case "–°–ø–∞—Å–±—Ä–æ—Å–æ–∫": return "–°–ü–ê–°–ë–†–û–°–û–ö";
    case "–£—Ä–æ–Ω": return "–£–†–û–ù";
    case "–õ–µ—á–µ–Ω–∏–µ": return "–õ–ï–ß–ï–ù–ò–ï";
    case "–ê—Ç–∞–∫–∞": return "–ü–û–ü–ê–î–ê–ù–ò–ï";
    case "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ": return "–ó–ê–ö–õ–ò–ù–ê–ù–ò–ï";
    case "–ù–∞–≤—ã–∫": return "–ü–†–û–í–ï–†–ö–ê";
    default: return "–ë–†–û–°–û–ö";
  }
}

function getActionEmoji(type: string): string {
  switch (type) {
    case "–°–ø–∞—Å–±—Ä–æ—Å–æ–∫": return "üõ°Ô∏è";
    case "–£—Ä–æ–Ω": return "‚öîÔ∏è";
    case "–õ–µ—á–µ–Ω–∏–µ": return "üíö";
    case "–ê—Ç–∞–∫–∞": return "üéØ";
    case "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ": return "‚ú®";
    case "–ù–∞–≤—ã–∫": return "üß†";
    default: return "üé≤";
  }
}

function getActionVerb(type: string): string {
  switch (type) {
    case "–°–ø–∞—Å–±—Ä–æ—Å–æ–∫": return "–¥–µ–ª–∞–µ—Ç —Å–ø–∞—Å–±—Ä–æ—Å–æ–∫";
    case "–£—Ä–æ–Ω": return "–Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω";
    case "–õ–µ—á–µ–Ω–∏–µ": return "–ª–µ—á–∏—Ç";
    case "–ê—Ç–∞–∫–∞": return "–∞—Ç–∞–∫—É–µ—Ç";
    case "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ": return "–∫–æ–ª–¥—É–µ—Ç";
    case "–ù–∞–≤—ã–∫": return "–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–≤—ã–∫";
    default: return "–±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫";
  }
}
