import React, { useState, useEffect } from 'react';

interface DiceRollModalProps {
  isOpen: boolean;
  onClose: () => void;
  rollData: {
    characterName?: string;
    description: string;
    dice: string;
    modifier: number;
    result: number;
    diceRoll: number;
    type: string;
    individualRolls?: number[];
    // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±—Ä–æ—Å–∫–æ–≤
    separateRolls?: Array<{
      name: string;
      dice: string;
      diceRoll: number;
      modifier: number;
      result: number;
      individualRolls?: number[];
    }>;
  } | null;
}

export default function DiceRollModal({ isOpen, onClose, rollData }: DiceRollModalProps) {
  const [isAnimating, setIsAnimating] = useState(false);
  const [showResult, setShowResult] = useState(false);

  useEffect(() => {
    if (isOpen && rollData) {
      setIsAnimating(true);
      setShowResult(false);
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
      const animationTimer = setTimeout(() => {
        setIsAnimating(false);
        setShowResult(true);
      }, 800);

      return () => {
        clearTimeout(animationTimer);
      };
    }
  }, [isOpen, rollData]);

  if (!isOpen || !rollData) return null;

  const { description, dice, modifier, result, diceRoll, type, individualRolls, separateRolls } = rollData;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –µ–≥–æ —Ü–≤–µ—Ç
  const getActionType = () => {
    if (type === "–°–ø–∞—Å–±—Ä–æ—Å–æ–∫") return { text: "–°–ü–ê–°–ë–†–û–°–û–ö", color: "text-green-400" };
    if (type === "–£—Ä–æ–Ω") return { text: "–£–†–û–ù", color: "text-red-300" };
    if (type === "–õ–µ—á–µ–Ω–∏–µ") return { text: "–õ–ï–ß–ï–ù–ò–ï", color: "text-green-300" };
    if (type === "–ê—Ç–∞–∫–∞") return { text: "–ü–û–ü–ê–î–ê–ù–ò–ï", color: "text-blue-300" };
    if (type === "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ") return { text: "–ó–ê–ö–õ–ò–ù–ê–ù–ò–ï", color: "text-purple-400" };
    if (type === "–ù–∞–≤—ã–∫") return { text: "–ü–†–û–í–ï–†–ö–ê", color: "text-purple-400" };
    if (description === "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞") return { text: "–ë–†–û–°–û–ö", color: "text-amber-600" };
    return { text: "–ü–†–û–í–ï–†–ö–ê", color: "text-purple-400" };
  };

  const actionType = getActionType();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±—Ä–æ—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –°–∏—è—é—â–∏—Ö —É–¥–∞—Ä–æ–≤)
  const hasSeparateRolls = separateRolls && separateRolls.length > 0;

  return (
    <div className="fixed bottom-4 right-4 z-50">
      <div 
        className="bg-gray-800 border border-gray-600 rounded-lg p-4 min-w-[280px] cursor-pointer hover:bg-gray-700 transition-colors"
        onClick={onClose}
      >
        {hasSeparateRolls ? (
          // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: —Å—Ç–æ–ª–±–∏–∫ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –±—Ä–æ—Å–∫–∞–º–∏
          <div className="space-y-3">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="flex items-center gap-2 mb-3">
              <span className="text-gray-300 text-sm font-semibold uppercase">
                {description}:
              </span>
              <span className={`text-sm font-semibold uppercase ${actionType.color}`}>
                {actionType.text}
              </span>
            </div>

            {/* –û—Ç–¥–µ–ª—å–Ω—ã–µ –±—Ä–æ—Å–∫–∏ */}
            <div className="space-y-2">
              {separateRolls.map((roll, index) => (
                <div key={index} className="flex items-center justify-between">
                  {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫—É–±–∏–∫ */}
                  <div className="flex items-center gap-2">
                    <span className="text-gray-300 text-xs font-medium">
                      {roll.name}:
                    </span>
                    <div className={`w-6 h-6 bg-gray-700 rounded flex items-center justify-center text-xs font-bold text-gray-300 transition-all duration-300 ${
                      isAnimating ? 'animate-spin' : ''
                    }`}>
                      {isAnimating ? 'üé≤' : roll.dice}
                    </div>
                    <span className="text-white text-sm font-bold">
                      {roll.individualRolls && roll.individualRolls.length > 0 
                        ? `${roll.individualRolls.join('+')}${roll.modifier !== 0 ? (roll.modifier > 0 ? `+${roll.modifier}` : `${roll.modifier}`) : ''}`
                        : `${roll.diceRoll}${roll.modifier !== 0 ? (roll.modifier > 0 ? `+${roll.modifier}` : `${roll.modifier}`) : ''}`
                      }
                    </span>
                  </div>
                  
                  {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
                  <div className="flex items-center gap-2">
                    <div className="w-px h-4 bg-gray-500"></div>
                    <span className="text-gray-400 text-sm">=</span>
                    <span className="text-white text-lg font-bold">
                      {roll.result}
                    </span>
                  </div>
                </div>
              ))}
            </div>

            {/* –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
            <div className="flex items-center justify-between pt-2 border-t border-gray-600">
              <span className="text-gray-300 text-sm font-semibold">
                –ò–¢–û–ì–û:
              </span>
              <span className="text-white text-xl font-bold">
                {result}
              </span>
            </div>
          </div>
        ) : (
          // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–¥–∏–Ω –±—Ä–æ—Å–æ–∫
          <div>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="flex items-center gap-2 mb-2">
              <span className="text-gray-300 text-sm font-semibold uppercase">
                {description}:
              </span>
              <span className={`text-sm font-semibold uppercase ${actionType.color}`}>
                {actionType.text}
              </span>
            </div>

            {/* –ö—É–±–∏–∫ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
            <div className="flex items-center gap-3">
              {/* –ò–∫–æ–Ω–∫–∏ –∫—É–±–∏–∫–æ–≤ */}
              <div className="flex items-center gap-1">
                {dice.includes(' + ') ? (
                  // –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫—É–±–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∏
                  dice.split(' + ').map((dicePart, index) => (
                    <div key={index} className={`w-8 h-8 bg-gray-700 rounded flex items-center justify-center text-xs font-bold text-gray-300 transition-all duration-300 ${
                      isAnimating ? 'animate-spin' : ''
                    }`}>
                      {isAnimating ? 'üé≤' : dicePart.trim()}
                    </div>
                  ))
                ) : (
                  // –î–ª—è –æ–¥–Ω–æ–≥–æ –∫—É–±–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                  <div className={`w-8 h-8 bg-gray-700 rounded flex items-center justify-center text-xs font-bold text-gray-300 transition-all duration-300 ${
                    isAnimating ? 'animate-spin' : ''
                  }`}>
                    {isAnimating ? 'üé≤' : dice}
                  </div>
                )}
              </div>

              {/* –†–∞—Å—á–µ—Ç */}
              <div className="flex items-center gap-2">
                <span className="text-white text-lg font-bold">
                  {individualRolls && individualRolls.length > 0 
                    ? `${individualRolls.join('+')}${modifier !== 0 ? (modifier > 0 ? `+${modifier}` : `${modifier}`) : ''}`
                    : `${diceRoll}${modifier !== 0 ? (modifier > 0 ? `+${modifier}` : `${modifier}`) : ''}`
                  }
                </span>
                <div className="w-px h-4 bg-gray-500"></div>
                <span className="text-gray-400 text-lg">=</span>
                <span className="text-white text-2xl font-bold">
                  {result}
                </span>
              </div>
            </div>

            {/* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
            {showResult && dice === 'd20' && diceRoll === 20 && (
              <div className="text-green-400 text-xs font-bold mt-1 animate-pulse">
                –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•!
              </div>
            )}
            {showResult && dice === 'd20' && diceRoll === 1 && (
              <div className="text-red-400 text-xs font-bold mt-1 animate-pulse">
                –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–í–ê–õ!
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
