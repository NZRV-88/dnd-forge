import React, { useState } from 'react';
import { X, Settings, Palette, Send, MessageCircle } from 'lucide-react';
import FrameColorPicker from './FrameColorPicker';
import { useFrameColor } from '@/contexts/FrameColorContext';
import { useSocialSharing } from '@/hooks/useSocialSharing';

interface SettingsSidebarProps {
  isOpen: boolean;
  onClose: () => void;
  telegramEnabled: boolean;
  setTelegramEnabled: (enabled: boolean) => void;
  telegramChatId: string;
  setTelegramChatId: (chatId: string) => void;
  telegramThreadId: string;
  setTelegramThreadId: (threadId: string) => void;
  autoShare: boolean;
  setAutoShare: (autoShare: boolean) => void;
}

export default function SettingsSidebar({ 
  isOpen, 
  onClose, 
  telegramEnabled, 
  setTelegramEnabled, 
  telegramChatId, 
  setTelegramChatId, 
  telegramThreadId, 
  setTelegramThreadId, 
  autoShare, 
  setAutoShare 
}: SettingsSidebarProps) {
  const { frameColor, setFrameColor } = useFrameColor();
  const { shareRoll, isLoading } = useSocialSharing();

  const handleColorChange = (color: string) => {
    setFrameColor(color);
  };

  const handleTestTelegram = async () => {
    if (!telegramEnabled || !telegramChatId) return;
    
    const testRollData = {
      characterName: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂',
      description: '–¢–µ—Å—Ç–æ–≤–∞—è –∞—Ç–∞–∫–∞',
      dice: 'd20',
      modifier: 5,
      result: 15,
      diceRoll: 10,
      type: '–ê—Ç–∞–∫–∞',
      individualRolls: [10]
    };

    try {
      const result = await shareRoll('telegram', testRollData, telegramChatId, undefined, telegramThreadId);
      if (result.success) {
        alert('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      } else {
        alert(`–û—à–∏–±–∫–∞: ${result.error}`);
      }
    } catch (error) {
      alert(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error}`);
    }
  };

  if (!isOpen) return null;

  return (
    <>
      {/* Overlay */}
      <div 
        className="fixed top-16 left-0 right-0 bottom-0 bg-black bg-opacity-50 z-[999999] flex justify-end"
        onClick={onClose}
      />
      
      {/* Sidebar */}
      <div className="fixed top-16 right-0 w-full max-w-md bg-neutral-900 h-full overflow-y-auto p-6 z-[999999]">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-2">
            <Settings className="w-5 h-5 text-gray-300" />
            <h2 className="text-lg font-semibold text-white">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
          </div>
          <button
            onClick={onClose}
            className="p-1 hover:bg-gray-700 rounded transition-colors"
          >
            <X className="w-5 h-5 text-gray-400" />
          </button>
        </div>

        {/* Frame Color Settings */}
        <div className="mb-8">
          <div className="flex items-center gap-2 mb-4">
            <Palette className="w-4 h-4 text-gray-300" />
            <h3 className="text-md font-medium text-white">–¶–≤–µ—Ç —Ñ—Ä–µ–π–º–∞</h3>
          </div>
          <div className="space-y-3">
            <label className="text-sm text-gray-300 block">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:</label>
            <FrameColorPicker
              currentColor={frameColor}
              onColorChange={handleColorChange}
              frameType="ability"
              className="text-sm"
            />
          </div>
        </div>

        {/* Telegram Settings */}
        <div className="mb-8">
          <div className="flex items-center gap-2 mb-4">
            <MessageCircle className="w-4 h-4 text-gray-300" />
            <h3 className="text-md font-medium text-white">Telegram</h3>
          </div>
          
          <div className="space-y-4">
            {/* Enable Telegram */}
            <div className="flex items-center gap-3">
              <input
                type="checkbox"
                id="telegramEnabled"
                checked={telegramEnabled}
                onChange={(e) => setTelegramEnabled(e.target.checked)}
                className="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500 focus:ring-2"
              />
              <label htmlFor="telegramEnabled" className="text-sm text-gray-300">
                –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
              </label>
            </div>

            {/* Auto Share */}
            <div className="flex items-center gap-3">
              <input
                type="checkbox"
                id="autoShare"
                checked={autoShare}
                onChange={(e) => setAutoShare(e.target.checked)}
                disabled={!telegramEnabled}
                className="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500 focus:ring-2 disabled:opacity-50"
              />
              <label htmlFor="autoShare" className="text-sm text-gray-300">
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ –±—Ä–æ—Å–∫–∏
              </label>
            </div>

              {/* Chat ID */}
              <div>
                <label htmlFor="chatId" className="block text-sm text-gray-300 mb-2">
                  Chat ID –≥—Ä—É–ø–ø—ã:
                </label>
                <input
                  type="text"
                  id="chatId"
                  value={telegramChatId}
                  onChange={(e) => setTelegramChatId(e.target.value)}
                  disabled={!telegramEnabled}
                  placeholder="-1002519374277"
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 disabled:opacity-50"
                />
                <p className="text-xs text-gray-400 mt-1">
                  ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ –≤ Telegram
                </p>
              </div>

              {/* Thread ID */}
              <div>
                <label htmlFor="threadId" className="block text-sm text-gray-300 mb-2">
                  ID —Ç–æ–ø–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
                </label>
                <input
                  type="text"
                  id="threadId"
                  value={telegramThreadId}
                  onChange={(e) => setTelegramThreadId(e.target.value)}
                  disabled={!telegramEnabled}
                  placeholder="7357"
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 disabled:opacity-50"
                />
                <p className="text-xs text-gray-400 mt-1">
                  –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–ø–∏–∫ –≥—Ä—É–ø–ø—ã
                </p>
              </div>

            {/* Test Button */}
            <button
              onClick={handleTestTelegram}
              disabled={!telegramEnabled || !telegramChatId || isLoading}
              className="w-full flex items-center justify-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white text-sm font-medium rounded-lg transition-colors"
            >
              <Send className="w-4 h-4" />
              {isLoading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞'}
            </button>
          </div>
        </div>

        {/* Info */}
        <div className="text-xs text-gray-400 space-y-1">
          <p>üí° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ</p>
          <p>üé≤ –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∫–ª—é—á–∏—Ç–µ "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ –±—Ä–æ—Å–∫–∏"</p>
        </div>
      </div>
    </>
  );
}
