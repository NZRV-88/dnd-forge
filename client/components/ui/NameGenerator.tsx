import { useState } from "react";
import { useCharacter } from "@/store/character";

interface NameGeneratorProps {
    onNameGenerated: (name: string) => void;
    className?: string;
}

interface NameGeneratorResponse {
    names: string[];
    success: boolean;
    error?: string;
}

// Расширенные базы данных имен для D&D
const FIRST_NAMES = [
    // Эльфийские имена (не из Властелина колец)
    "Аларион", "Алтаир", "Аранис", "Ариэль", "Аэлис", "Белегор", "Валар", "Галадриэль",
    "Дориан", "Элара", "Элвин", "Элдарион", "Элениэль", "Элронд", "Элсира", "Элтарион",
    "Фаэлин", "Галадриэль", "Гил-Галад", "Иларион", "Илмариэль", "Келеборн", "Ларион", "Линдал",
    "Лютиен", "Мираэль", "Нариэль", "Орион", "Пеларион", "Риларион", "Сильвана", "Турион",
    
    // Человеческие имена
    "Александр", "Виктор", "Дмитрий", "Сергей", "Андрей", "Николай", "Владимир", "Игорь",
    "Анна", "Елена", "Мария", "Ольга", "Татьяна", "Наталья", "Ирина", "Светлана",
    "Константин", "Михаил", "Алексей", "Максим", "Артем", "Иван", "Роман", "Денис",
    "Екатерина", "Анастасия", "Юлия", "Дарья", "Алина", "Полина", "Ксения", "Валерия",
    
    // Гномьи имена
    "Торин", "Гимли", "Балин", "Двалин", "Фили", "Кили", "Оин", "Глоин",
    "Бомбур", "Бифур", "Бофур", "Дори", "Нори", "Ори", "Двалин", "Балин",
    "Дис", "Торин", "Фрерин", "Трор", "Траин", "Торин", "Дейн", "Гимли",
    
    // Дварфские имена
    "Дурин", "Траин", "Трор", "Торин", "Дейн", "Гимли", "Балин", "Двалин",
    "Бруенор", "Вульфгар", "Торгрим", "Харгрик", "Кордрин", "Мордин", "Торбек", "Даррин",
    "Бруенор", "Вульфгар", "Торгрим", "Харгрик", "Кордрин", "Мордин", "Торбек", "Даррин",
    
    // Халфлингские имена
    "Бильбо", "Фродо", "Сэм", "Пиппин", "Мерри", "Тук", "Брендибак", "Гэмджи",
    "Перри", "Поппи", "Рози", "Руби", "Сэм", "Тоби", "Уиллоу", "Зак",
    "Альберт", "Берти", "Чарли", "Дейзи", "Эдди", "Флора", "Джордж", "Ханна",
    
    // Драконорожденные имена
    "Драко", "Вулкан", "Скай", "Флейм", "Сторм", "Тандер", "Блейз", "Эмбер",
    "Азур", "Кримсон", "Голд", "Сильвер", "Бронз", "Коппер", "Грин", "Блю",
    "Ред", "Блэк", "Уайт", "Грей", "Пурпл", "Оранж", "Пинк", "Йеллоу",
    
    // Тайфлинги
    "Люцифер", "Асмодей", "Бельфегор", "Маммон", "Левиафан", "Сатана", "Астарот", "Бегемот",
    "Абаддон", "Азраэль", "Бельзебуб", "Демогоргон", "Граза'т", "Молох", "Оркус", "Паззузу",
    "Зебулон", "Валак", "Андромалиус", "Гласиа", "Хагус", "Импи", "Каллиопе", "Левкиппа"
];

const LAST_NAMES = [
    // Эльфийские фамилии
    "Лунный Ветер", "Звездный Лист", "Серебряный Луч", "Золотой Дуб", "Лесной Шепот", "Речной Камень",
    "Горный Орел", "Морской Туман", "Весенний Цветок", "Осенний Лист", "Зимний Снег", "Летний Зной",
    
    // Человеческие фамилии
    "Светлый Меч", "Золотой Щит", "Благородный Рыцарь", "Добрый Сердце", "Мудрый Советник", "Храбрый Воин",
    "Честный Слово", "Верный Друг", "Сильный Дух", "Быстрый Ум", "Ловкий Рука", "Твердый Характер",
    "Мирный Покой", "Светлый Путь", "Золотая Дорога", "Серебряный Клинок", "Бронзовый Доспех", "Железная Воля",
    
    // Гномьи фамилии
    "Камнедробитель", "Златодел", "Серебряный Молот", "Железный Кузнец", "Медный Топор", "Бронзовый Щит",
    "Горный Кладезь", "Подземный Ход", "Глубокий Корень", "Твердый Камень", "Прочный Замок", "Надежный Столп",
    
    // Дварфские фамилии
    "Железный Кулак", "Каменная Борода", "Горный Молот", "Глубокий Корень", "Твердый Камень", "Прочный Столп",
    "Золотой Рудник", "Серебряный Шлем", "Бронзовый Щит", "Медный Топор", "Железный Меч", "Стальной Доспех",
    "Подземный Царь", "Горный Владыка", "Каменный Сердце", "Рудный Кладезь", "Кузнечный Мастер", "Молотобоец",
    
    // Халфлингские фамилии
    "Зеленый Холм", "Теплый Дом", "Уютный Сад", "Веселый Свисток", "Добрый Сосед", "Мирный Покой",
    "Солнечный Луг", "Цветущий Сад", "Тихий Ручей", "Мягкая Трава", "Сладкий Пирог", "Теплый Очаг",
    "Радостный Смех", "Дружелюбный Взгляд", "Уютный Уголок", "Веселый Танец", "Мирная Деревня", "Счастливый День",
    
    // Драконорожденные фамилии
    "Пламенный Коготь", "Ледяное Дыхание", "Громовой Рык", "Молниевый Удар", "Огненный Взгляд", "Морозный Ветер",
    "Буревестник", "Грозовая Туча", "Вулканический Пепел", "Ледяная Скорлупа", "Огненный Шар", "Молниевый Разряд",
    
    // Тайфлингские фамилии
    "Теневой Клинок", "Демонический Рог", "Адское Пламя", "Темный Шепот", "Зловещий Взгляд", "Проклятый Знак",
    "Дьявольский Коготь", "Демонический Хвост", "Теневой Плащ", "Адский Рык", "Темный Ритуал", "Проклятый Обет"
];

const TITLES = [
    "Великий", "Мудрый", "Храбрый", "Сильный", "Быстрый", "Ловкий", "Умный", "Добрый",
    "Злой", "Темный", "Светлый", "Древний", "Молодой", "Старый", "Новый", "Старый",
    "Белый", "Черный", "Красный", "Синий", "Зеленый", "Желтый", "Фиолетовый", "Оранжевый"
];

export default function NameGenerator({ onNameGenerated, className = "" }: NameGeneratorProps) {
    const [isGenerating, setIsGenerating] = useState(false);
    const { draft } = useCharacter();

    const generateName = async () => {
        setIsGenerating(true);
        
        try {
            // Получаем данные персонажа для контекста
            const race = draft?.basics?.race;
            const characterClass = draft?.basics?.class;
            
            console.log('NameGenerator: Генерируем имя для:', { race, characterClass });
            
            // Используем только продвинутый генератор
            const response = await fetch('/api/advanced-name-generator', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    race: race,
                    class: characterClass,
                    gender: 'any',
                    count: 1
                })
            });

            console.log('NameGenerator: Ответ от advanced-name-generator:', {
                ok: response.ok,
                status: response.status,
                statusText: response.statusText
            });

            if (!response.ok) {
                throw new Error(`Failed to generate name: ${response.status} ${response.statusText}`);
            }

            const data: NameGeneratorResponse = await response.json();
            
            console.log('NameGenerator: Данные от advanced-name-generator:', data);
            
            if (data.success && data.names.length > 0) {
                console.log('NameGenerator: Используем имя от advanced-name-generator:', data.names[0]);
                onNameGenerated(data.names[0]);
            } else {
                console.log('NameGenerator: Advanced-name-generator не вернул имя, используем статические');
                // Fallback к статическим именам
                generateStaticName();
            }
        } catch (error) {
            console.error('NameGenerator: Ошибка генерации имени:', error);
            console.log('NameGenerator: Используем статические имена из-за ошибки');
            // Fallback к статическим именам
            generateStaticName();
        } finally {
            setIsGenerating(false);
        }
    };

    const generateStaticName = () => {
        const firstName = FIRST_NAMES[Math.floor(Math.random() * FIRST_NAMES.length)];
        const lastName = LAST_NAMES[Math.floor(Math.random() * LAST_NAMES.length)];
        
        const fullName = `${firstName} ${lastName}`;
        onNameGenerated(fullName);
    };

    return (
        <div className={`gap-2 ${className}`}>
            <span
                onClick={isGenerating ? undefined : generateName}
                className={`text-[8px] text-muted-foreground hover:text-foreground uppercase cursor-pointer transition-colors ${
                    isGenerating ? 'opacity-50 cursor-not-allowed' : ''
                }`}
            >
                {isGenerating ? "Генерирую..." : "Предложить имя"}
            </span>
        </div>
    );
}
