import React, { useState, useEffect } from "react";
import { useFrameColor } from "@/contexts/FrameColorContext";
import { Weapons } from "@/data/items/weapons";
import { getClassByKey } from "@/data/classes";
import { Cantrips } from "@/data/spells/cantrips";
import { Gears, Ammunitions } from "@/data/items/gear";
import { Armors } from "@/data/items/armors";
import { Tools } from "@/data/items/tools";
import { EQUIPMENT_PACKS } from "@/data/items/equipment-packs";

type Props = {
  attacks: { name: string; bonus: number; damage: string }[];
  equipped?: {
    weaponSlot1?: { name: string; type: string; slots: number; versatileMode?: boolean }[];
    weaponSlot2?: { name: string; type: string; slots: number; versatileMode?: boolean }[];
    activeWeaponSlot?: number;
    armor?: { name: string; type: string };
    shield1?: { name: string; type: string };
    shield2?: { name: string; type: string };
    capacityItem?: { name: string; capacity: number };
  };
  stats?: Record<string, number>;
  proficiencyBonus?: number;
  classKey?: string;
  level?: number;
  onRoll?: (desc: string, ability: string, bonus: number, type: string, damageString?: string, attackRoll?: number) => void;
  onSwitchWeaponSlot?: (slot: number) => void;
  onUpdateEquipped?: (newEquipped: any) => void;
  characterData?: any;
};

type TabType = "actions" | "spells" | "inventory" | "features";
type ActionType = "attack" | "action" | "bonus" | "reaction";

export default function Attacks({ attacks, equipped, stats, proficiencyBonus, classKey, level, onRoll, onSwitchWeaponSlot, onUpdateEquipped, characterData }: Props) {
  const { frameColor } = useFrameColor();
  const [criticalHits, setCriticalHits] = useState<Record<string, boolean>>({});
  const [activeTab, setActiveTab] = useState<TabType>("actions");
  const [activeActionType, setActiveActionType] = useState<ActionType>("attack");
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ (–ª–æ–∫–∞–ª—å–Ω–æ–µ, –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å equipped)
  const [localEquipped, setLocalEquipped] = useState<{
    armor: string | null;
    mainSet: Array<{name: string, slots: number, isVersatile?: boolean, versatileMode?: boolean}>;
    additionalSet: Array<{name: string, slots: number, isVersatile?: boolean, versatileMode?: boolean}>;
  }>({
    armor: null,
    mainSet: [],
    additionalSet: []
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ equipped
  useEffect(() => {
    if (equipped) {
      // –û—Ä—É–∂–∏–µ –∏–∑ —Å–ª–æ—Ç–∞ 1 –∏–¥–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–æ—Ä
      const mainWeapons = equipped.weaponSlot1?.map(w => ({
        name: w.name,
        slots: w.slots,
        isVersatile: (w as any).isVersatile || false,
        versatileMode: (w as any).versatileMode || false
      })) || [];
      
      // –û—Ä—É–∂–∏–µ –∏–∑ —Å–ª–æ—Ç–∞ 2 –∏–¥–µ—Ç –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä
      const additionalWeapons = equipped.weaponSlot2?.map(w => ({
        name: w.name,
        slots: w.slots,
        isVersatile: (w as any).isVersatile || false,
        versatileMode: (w as any).versatileMode || false
      })) || [];
      
      // –©–∏—Ç—ã –∏–∑ —Å–ª–æ—Ç–∞ 1 –∏–¥–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–æ—Ä
      const mainShields = equipped.shield1 ? [{
        name: equipped.shield1.name,
        slots: (equipped.shield1 as any).slots || 1,
        isVersatile: (equipped.shield1 as any).isVersatile || false,
        versatileMode: (equipped.shield1 as any).versatileMode || false
      }] : [];
      
      // –©–∏—Ç—ã –∏–∑ —Å–ª–æ—Ç–∞ 2 –∏–¥–µ—Ç –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä
      const additionalShields = equipped.shield2 ? [{
        name: equipped.shield2.name,
        slots: (equipped.shield2 as any).slots || 1,
        isVersatile: (equipped.shield2 as any).isVersatile || false,
        versatileMode: (equipped.shield2 as any).versatileMode || false
      }] : [];
      
      setLocalEquipped({
        armor: equipped.armor?.name || null,
        mainSet: [...mainWeapons, ...mainShields],
        additionalSet: [...additionalWeapons, ...additionalShields]
      });
    }
  }, [equipped]);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä—É–∂–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–æ—Ç–µ
  const getAllWeapons = () => {
    if (!equipped) return [];
    
    const activeSlot = equipped.activeWeaponSlot || 1;
    const allWeapons = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä—É–∂–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—Ç–∞
    if (equipped.weaponSlot1 && equipped.weaponSlot1.length > 0) {
      equipped.weaponSlot1.forEach(weapon => {
        allWeapons.push({ ...weapon, slot: 1, isActive: activeSlot === 1 });
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä—É–∂–∏–µ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å–ª–æ—Ç–∞
    if (equipped.weaponSlot2 && equipped.weaponSlot2.length > 0) {
      equipped.weaponSlot2.forEach(weapon => {
        allWeapons.push({ ...weapon, slot: 2, isActive: activeSlot === 2 });
      });
    }
    
    return allWeapons;
  };

  // –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å –∫ –∞—Ç–∞–∫–µ –¥–ª—è –æ—Ä—É–∂–∏—è
  const getAttackBonus = (weapon: any) => {
    if (!stats || !proficiencyBonus) return 0;
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ä—É–∂–∏–∏ –ø–æ –∏–º–µ–Ω–∏
    const weaponData = Weapons.find(w => w.name === weapon.name);
    const weaponType = weaponData?.type || 'melee';
    
    // –î–ª—è –æ—Ä—É–∂–∏—è –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–ª—É, –¥–ª—è –¥–∞–ª—å–Ω–µ–≥–æ - –ª–æ–≤–∫–æ—Å—Ç—å
    const abilityModifier = weaponType === 'ranged' ? 
      Math.floor((stats.dex - 10) / 2) : 
      Math.floor((stats.str - 10) / 2);
    
    return abilityModifier + proficiencyBonus;
  };

  // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–Ω –¥–ª—è –æ—Ä—É–∂–∏—è
  const getDamage = (weapon: any) => {
    if (!stats) return "1d4";
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ä—É–∂–∏–∏ –ø–æ –∏–º–µ–Ω–∏
    const weaponData = Weapons.find(w => w.name === weapon.name);
    const baseDamage = weaponData?.damage || "1d4";
    const weaponType = weaponData?.type || 'melee';
    
    const abilityModifier = weaponType === 'ranged' ? 
      Math.floor((stats.dex - 10) / 2) : 
      Math.floor((stats.str - 10) / 2);
    
    const modifierStr = abilityModifier >= 0 ? `+${abilityModifier}` : abilityModifier.toString();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ä—É–∂–∏—è
    const weaponKey = `${weapon.name}-${weapon.slot}`;
    const isCritical = criticalHits[weaponKey];
    
    if (isCritical) {
      // –£–¥–≤–∞–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞
      const doubledDamage = baseDamage.replace(/(\d+)d(\d+)/, (match, num, size) => {
        return `${parseInt(num) * 2}d${size}`;
      });
      return `${doubledDamage}${modifierStr}`;
    }
    
    return `${baseDamage}${modifierStr}`;
  };

  const allWeapons = getAllWeapons();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ç–∞–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è
  const handleAttack = (weapon: any, ability: string, bonus: number, isSpell: boolean = false) => {
    // –ë—Ä–æ—Å–∞–µ–º d20 –¥–ª—è –∞—Ç–∞–∫–∏
    const attackRoll = Math.floor(Math.random() * 20) + 1;
    const isCritical = attackRoll === 20;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ø–∞–¥–∞–Ω–∏–π
    if (isCritical) {
      const key = isSpell ? `spell-${weapon}` : `${weapon.name}-${weapon.slot}`;
      setCriticalHits(prev => ({ ...prev, [key]: true }));
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é onRoll —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—Ä–æ—Å–∫–∞
    if (onRoll) {
      // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      onRoll(isSpell ? weapon : weapon.name, ability, bonus, "–ê—Ç–∞–∫–∞", undefined, attackRoll);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Ä–æ–Ω–∞ —Å —Å–±—Ä–æ—Å–æ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è
  const handleDamage = (weapon: any, ability: string, modifier: number, damage: string, isSpell: boolean = false) => {
    const key = isSpell ? `spell-${weapon}` : `${weapon.name}-${weapon.slot}`;
    const isCritical = criticalHits[key];
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —É—Ä–æ–Ω
    if (isCritical) {
      setCriticalHits(prev => {
        const newState = { ...prev };
        delete newState[key];
        return newState;
      });
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é onRoll
    onRoll?.(isSpell ? weapon : weapon.name, ability, modifier, "–£—Ä–æ–Ω", damage);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
  const getSpellName = (spellKey: string) => {
    const spell = Cantrips.find(s => s.key === spellKey);
    return spell?.name || spellKey;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Ç–∏–ø–∞ —É—Ä–æ–Ω–∞
  const getDamageIcon = (damageType?: string) => {
    switch (damageType) {
      case "–û–≥–æ–Ω—å":
        return "üî•";
      case "–õ–µ–¥":
        return "‚ùÑÔ∏è";
      case "–ú–æ–ª–Ω–∏—è":
        return "‚ö°";
      case "–ö–∏—Å–ª–æ—Ç–∞":
        return "üß™";
      case "–Ø–¥":
        return "‚ò†Ô∏è";
      case "–ù–µ–∫—Ä–æ—Ç–∏—á–µ—Å–∫–∏–π":
        return "üíÄ";
      case "–ò–∑–ª—É—á–µ–Ω–∏–µ":
        return "‚òÄÔ∏è";
      case "–ü—Å–∏—Ö–∏—á–µ—Å–∫–∏–π":
        return "üß†";
      case "–°–∏–ª–æ–≤–æ–π":
        return "üí´";
      case "–ì—Ä–æ–º":
        return "üí•";
      case "–î—É—Ö–æ–≤–Ω—ã–π":
        return "‚ú®";
      default:
        return "üîÆ";
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–∏–ø–∞ —É—Ä–æ–Ω–∞
  const getDamageColor = (damageType?: string) => {
    switch (damageType) {
      case "–û–≥–æ–Ω—å":
        return { border: "#EF4444", bg: "#EF444420", text: "#FCA5A5" }; // –ö—Ä–∞—Å–Ω—ã–π
      case "–õ–µ–¥":
        return { border: "#3B82F6", bg: "#3B82F620", text: "#93C5FD" }; // –°–∏–Ω–∏–π
      case "–ú–æ–ª–Ω–∏—è":
        return { border: "#60A5FA", bg: "#60A5FA20", text: "#93C5FD" }; // –ì–æ–ª—É–±–æ–π
      case "–ö–∏—Å–ª–æ—Ç–∞":
        return { border: "#10B981", bg: "#10B98120", text: "#6EE7B7" }; // –ó–µ–ª–µ–Ω—ã–π
      case "–Ø–¥":
        return { border: "#8B5CF6", bg: "#8B5CF620", text: "#C4B5FD" }; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
      case "–ù–µ–∫—Ä–æ—Ç–∏—á–µ—Å–∫–∏–π":
        return { border: "#6B7280", bg: "#6B728020", text: "#D1D5DB" }; // –°–µ—Ä—ã–π
      case "–ò–∑–ª—É—á–µ–Ω–∏–µ":
        return { border: "#F97316", bg: "#F9731620", text: "#FDBA74" }; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
      case "–ü—Å–∏—Ö–∏—á–µ—Å–∫–∏–π":
        return { border: "#EC4899", bg: "#EC489920", text: "#F9A8D4" }; // –†–æ–∑–æ–≤—ã–π
      case "–°–∏–ª–æ–≤–æ–π":
        return { border: "#C0C0C0", bg: "#C0C0C020", text: "#E5E7EB" }; // –°–µ—Ä–µ–±—Ä—è–Ω—ã–π
      case "–ì—Ä–æ–º":
        return { border: "#F59E0B", bg: "#F59E0B20", text: "#FCD34D" }; // –ñ–µ–ª—Ç—ã–π
      case "–î—É—Ö–æ–≤–Ω—ã–π":
        return { border: "#F59E0B", bg: "#F59E0B20", text: "#FCD34D" }; // –ó–æ–ª–æ—Ç–æ–π
      default:
        return { border: "#A855F7", bg: "#A855F720", text: "#C4B5FD" }; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
  const getSpellData = (spellKey: string) => {
    return Cantrips.find(s => s.key === spellKey);
  };

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç–∞–∫ –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è –∏ –∫–ª–∞—Å—Å–∞)
  const getAttacksPerAction = () => {
    // –ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞: 1
    let attacks = 1;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç–∞–∫–∏ –∏–∑ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∫–ª–∞—Å—Å–∞
    if (classKey && level) {
      const classInfo = getClassByKey(classKey);
      if (classInfo?.features) {
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —É—Ä–æ–≤–Ω—è–º –æ—Ç 1 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        for (let lvl = 1; lvl <= level; lvl++) {
          const features = classInfo.features[lvl];
          if (features) {
            features.forEach(feature => {
              if (feature.extraAttack) {
                attacks += feature.extraAttack;
              }
            });
          }
        }
      }
    }
    
    return attacks;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
  const getItemWeight = (itemName: string) => {
    const cleanName = itemName.replace(/^\d+x\s+/, '');
    
    // –ò—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –º–∞—Å—Å–∏–≤–∞—Ö
    let item = Gears.find(g => g.name === cleanName);
    if (item) {
      return typeof item.weight === 'number' ? item.weight : 0;
    }
    
    item = Ammunitions.find(a => a.name === cleanName);
    if (item) {
      return typeof item.weight === 'number' ? item.weight : 0;
    }
    
    const weapon = Weapons.find(w => w.name === cleanName);
    if (weapon) {
      return typeof weapon.weight === 'number' ? weapon.weight : 0;
    }
    
    const armor = Armors.find(a => a.name === cleanName);
    if (armor) {
      return typeof armor.weight === 'number' ? armor.weight : 0;
    }
    
    const pack = EQUIPMENT_PACKS.find(p => p.name === cleanName);
    if (pack) {
      return typeof pack.weight === 'number' ? pack.weight : 0;
    }
    
    const tool = Tools.find(t => t.name === cleanName);
    if (tool) {
      return typeof tool.weight === 'number' ? tool.weight : 0;
    }
    
    return 0;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
  const getItemCost = (itemName: string) => {
    const cleanName = itemName.replace(/^\d+x\s+/, '');
    
    // –ò—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –º–∞—Å—Å–∏–≤–∞—Ö
    let item = Gears.find(g => g.name === cleanName);
    if (item) {
      return item.cost || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
    
    item = Ammunitions.find(a => a.name === cleanName);
    if (item) {
      return item.cost || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
    
    const weapon = Weapons.find(w => w.name === cleanName);
    if (weapon) {
      return weapon.cost || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
    
    const armor = Armors.find(a => a.name === cleanName);
    if (armor) {
      return armor.cost || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
    
    const pack = EQUIPMENT_PACKS.find(p => p.name === cleanName);
    if (pack) {
      return pack.cost || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
    
    const tool = Tools.find(t => t.name === cleanName);
    if (tool) {
      return tool.cost || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
    
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
  const getItemQuantity = (itemName: string) => {
    const match = itemName.match(/^(\d+)x\s+(.+)$/);
    if (match) {
      return parseInt(match[1]);
    }
    return 1;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
  const getItemType = (itemName: string) => {
    const cleanName = itemName.replace(/^\d+x\s+/, '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä—É–∂–∏–µ
    const weapon = Weapons.find(w => w.name === cleanName);
    if (weapon) return 'weapon';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å–ø–µ—Ö–∏ –∏ —â–∏—Ç—ã
    const armor = Armors.find(a => a.name === cleanName);
    if (armor) {
      if (armor.category === 'shield') {
        return 'shield';
      }
      return 'armor';
    }
    
    return 'other';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ä—É–∂–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º
  const isVersatileWeapon = (itemName: string) => {
    const cleanName = itemName.replace(/^\d+x\s+/, '');
    const weapon = Weapons.find(w => w.name === cleanName);
    return weapon?.properties?.includes('versatile') || false;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø—Ä–µ–¥–º–µ—Ç
  const isItemEquipped = (itemName: string) => {
    const cleanName = itemName.replace(/^\d+x\s+/, '');
    const itemType = getItemType(itemName);
    
    switch (itemType) {
      case 'armor':
        return localEquipped.armor === cleanName;
      case 'weapon':
      case 'shield':
        return localEquipped.mainSet.some(item => item.name === cleanName) || 
               localEquipped.additionalSet.some(item => item.name === cleanName);
      default:
        return false;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–æ–∂–Ω–æ –ª–∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
  const canEquipItem = (itemName: string) => {
    const cleanName = itemName.replace(/^\d+x\s+/, '');
    const itemType = getItemType(itemName);
    
    if (itemType === 'other') return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    if (itemType === 'armor' && localEquipped.armor) return false;
    if (itemType === 'shield' && (localEquipped.mainSet.some(item => item.name === cleanName) || localEquipped.additionalSet.some(item => item.name === cleanName))) return false;
    
    if (itemType === 'weapon' || itemType === 'shield') {
      const requiredSlots = getItemSlots(itemName);
      const mainUsedSlots = getUsedSlots(localEquipped.mainSet);
      const additionalUsedSlots = getUsedSlots(localEquipped.additionalSet);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–º –Ω–∞–±–æ—Ä–µ
      return (mainUsedSlots + requiredSlots <= 2) || (additionalUsedSlots + requiredSlots <= 2);
    }
    
    return true;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –æ—Ä—É–∂–∏—è
  const toggleVersatileMode = (itemName: string) => {
    const cleanName = itemName.replace(/^\d+x\s+/, '');
    
    setLocalEquipped(prev => {
      // –ò—â–µ–º –æ—Ä—É–∂–∏–µ –≤ –æ–±–æ–∏—Ö –Ω–∞–±–æ—Ä–∞—Ö
      const mainItem = prev.mainSet.find(item => item.name === cleanName);
      const additionalItem = prev.additionalSet.find(item => item.name === cleanName);
      const item = mainItem || additionalItem;
      
      if (!item || !item.isVersatile) {
        return prev;
      }
      
      const newVersatileMode = !item.versatileMode;
      const newSlots = newVersatileMode ? 2 : 1;
      const updatedItem = { ...item, versatileMode: newVersatileMode, slots: newSlots };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ –æ—Ä—É–∂–∏–µ –≤ —Ç–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä
      const currentSet = mainItem ? prev.mainSet : prev.additionalSet;
      const otherSet = mainItem ? prev.additionalSet : prev.mainSet;
      
      const currentUsedSlots = getUsedSlots(currentSet) - item.slots + newSlots;
      const otherUsedSlots = getUsedSlots(otherSet);
      
      if (currentUsedSlots <= 2) {
        // –ü–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä
        if (mainItem) {
          return {
            ...prev,
            mainSet: prev.mainSet.map(i => i.name === cleanName ? updatedItem : i)
          };
        } else {
          return {
            ...prev,
            additionalSet: prev.additionalSet.map(i => i.name === cleanName ? updatedItem : i)
          };
        }
      } else if (otherUsedSlots + newSlots <= 2) {
        // –ü–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π –Ω–∞–±–æ—Ä
        if (mainItem) {
          return {
            ...prev,
            mainSet: prev.mainSet.filter(i => i.name !== cleanName),
            additionalSet: [...prev.additionalSet, updatedItem]
          };
        } else {
          return {
            ...prev,
            additionalSet: prev.additionalSet.filter(i => i.name !== cleanName),
            mainSet: [...prev.mainSet, updatedItem]
          };
        }
      } else {
        // –ù–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∏ –≤ –æ–¥–∏–Ω –Ω–∞–±–æ—Ä, –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π
        if (mainItem) {
          return {
            ...prev,
            mainSet: [updatedItem]
          };
        } else {
          return {
            ...prev,
            additionalSet: [updatedItem]
          };
        }
      }
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
  const toggleItemEquipped = (itemName: string) => {
    const cleanName = itemName.replace(/^\d+x\s+/, '');
    const itemType = getItemType(itemName);
    
    setLocalEquipped(prev => {
      switch (itemType) {
        case 'armor':
          return {
            ...prev,
            armor: prev.armor === cleanName ? null : cleanName
          };
          
        case 'weapon':
        case 'shield':
          // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω, —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
          const mainItem = prev.mainSet.find(item => item.name === cleanName);
          const additionalItem = prev.additionalSet.find(item => item.name === cleanName);
          
          if (mainItem) {
            return {
              ...prev,
              mainSet: prev.mainSet.filter(item => item.name !== cleanName)
            };
          }
          if (additionalItem) {
            return {
              ...prev,
              additionalSet: prev.additionalSet.filter(item => item.name !== cleanName)
            };
          }
          
          // –ï—Å–ª–∏ –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –Ω–∞–±–æ—Ä
          const isVersatile = isVersatileWeapon(itemName);
          const requiredSlots = getItemSlots(itemName, false); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–¥–Ω–æ—Ä—É—á–Ω—ã–π —Ä–µ–∂–∏–º
          const mainUsedSlots = getUsedSlots(prev.mainSet);
          const additionalUsedSlots = getUsedSlots(prev.additionalSet);
          
          const newItem = {
            name: cleanName,
            slots: requiredSlots,
            isVersatile,
            versatileMode: false
          };
          
          // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–æ—Ä
          if (mainUsedSlots + requiredSlots <= 2) {
            return {
              ...prev,
              mainSet: [...prev.mainSet, newItem]
            };
          }
          // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π
          else if (additionalUsedSlots + requiredSlots <= 2) {
            return {
              ...prev,
              additionalSet: [...prev.additionalSet, newItem]
            };
          }
          // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∏ –≤ –æ–¥–∏–Ω, –∑–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–æ—Ä
          else {
            return {
              ...prev,
              mainSet: [newItem]
            };
          }
          
        default:
          return prev;
      }
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–ª–æ—Ç–æ–≤, –∑–∞–Ω—è—Ç—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–º
  const getItemSlots = (itemName: string, versatileMode?: boolean) => {
    const cleanName = itemName.replace(/^\d+x\s+/, '');
    const itemType = getItemType(itemName);
    
    if (itemType === 'weapon') {
      const weapon = Weapons.find(w => w.name === cleanName);
      if (weapon?.properties?.includes('two-handed')) {
        return 2;
      }
      if (weapon?.properties?.includes('versatile') && versatileMode) {
        return 2;
      }
      return 1;
    }
    
    if (itemType === 'shield') {
      return 1;
    }
    
    return 0;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ –Ω–∞–±–æ—Ä–µ
  const getUsedSlots = (set: Array<{name: string, slots: number, isVersatile?: boolean, versatileMode?: boolean}>) => {
    return set.reduce((total, item) => total + item.slots, 0);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ –Ω–∞–±–æ—Ä–µ
  const getFreeSlots = (set: Array<{name: string, slots: number, isVersatile?: boolean, versatileMode?: boolean}>) => {
    const used = getUsedSlots(set);
    return Math.max(0, 2 - used); // –ú–∞–∫—Å–∏–º—É–º 2 —Å–ª–æ—Ç–∞ –Ω–∞ –Ω–∞–±–æ—Ä
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ –Ω–∞–±–æ—Ä–µ
  const getUsedSlotsCount = (set: Array<{name: string, slots: number, isVersatile?: boolean, versatileMode?: boolean}>) => {
    return getUsedSlots(set);
  };

  // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –≤–µ—Å–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
  const calculateTotalWeight = () => {
    if (!characterData?.equipment) {
      console.log('No equipment data found');
      return 0;
    }
    
    let totalWeight = 0;
    characterData.equipment.forEach((item: string) => {
      const weight = getItemWeight(item);
      console.log(`Item: ${item}, Weight: ${weight}`);
      totalWeight += weight;
    });
    console.log(`Total weight: ${totalWeight}`);
    return totalWeight;
  };

  // –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ–≥–æ –≤–µ—Å–∞
  const calculateMaxCarryWeight = () => {
    const strength = stats?.str || 10;
    const baseCapacity = strength * 15; // –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞ D&D 5e
    
    // –î–æ–±–∞–≤–ª—è–µ–º capacity –æ—Ç –Ω–∞–¥–µ—Ç—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const equippedCapacity = equipped?.capacityItem?.capacity || 0;
    
    return baseCapacity + equippedCapacity;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
  const isOverloaded = (currentWeight: number) => {
    const maxWeight = calculateMaxCarryWeight();
    return currentWeight > maxWeight;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
  const getCurrency = () => {
    console.log('Currency data:', characterData?.currency);
    if (!characterData?.currency) return null;
    
    const { platinum, gold, electrum, silver, copper } = characterData.currency;
    const totalValue = platinum * 1000 + gold * 100 + electrum * 50 + silver * 10 + copper;
    
    console.log('Currency values:', { platinum, gold, electrum, silver, copper, totalValue });
    
    if (totalValue === 0) return null;
    
    const parts = [];
    if (platinum > 0) parts.push(`${platinum} –ü–ü`);
    if (gold > 0) parts.push(`${gold} –ó–ú`);
    if (electrum > 0) parts.push(`${electrum} –≠–ú`);
    if (silver > 0) parts.push(`${silver} –°–ú`);
    if (copper > 0) parts.push(`${copper} –ú–ú`);
    
    const result = parts.join(', ');
    console.log('Currency result:', result);
    return result;
  };

  const tabs = [
    { key: "actions" as TabType, label: "–î–ï–ô–°–¢–í–ò–Ø" },
    { key: "spells" as TabType, label: "–ó–ê–ö–õ–ò–ù–ê–ù–ò–Ø" },
    { key: "inventory" as TabType, label: "–ò–ù–í–ï–ù–¢–ê–†–¨" },
    { key: "features" as TabType, label: "–û–°–û–ë–ï–ù–ù–û–°–¢–ò" }
  ];

  const actionTypes = [
    { key: "attack" as ActionType, label: "–ê–¢–ê–ö–ê" },
    { key: "action" as ActionType, label: "–î–ï–ô–°–¢–í–ò–ï" },
    { key: "bonus" as ActionType, label: "–ë–û–ù–£–°–ù–û–ï –î–ï–ô–°–¢–í–ò–ï" },
    { key: "reaction" as ActionType, label: "–†–ï–ê–ö–¶–ò–Ø" }
  ];

  const renderContent = () => {
    switch (activeTab) {
      case "actions":
        return (
          <div>
            {/* –ü–æ–¥–º–µ–Ω—é —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div 
              className="flex gap-1 mb-2"
            >
              {actionTypes.map((actionType) => {
                const isActive = activeActionType === actionType.key;
                const frameColorHex = frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54';
                
                return (
                  <button
                    key={actionType.key}
                    onClick={() => setActiveActionType(actionType.key)}
                    className="px-2 py-1 text-xs font-semibold uppercase transition-all duration-200 relative rounded"
                    style={{
                      color: isActive ? '#FFFFFF' : '#6B7280',
                      backgroundColor: isActive ? frameColorHex : 'transparent'
                    }}
                    onMouseEnter={(e) => {
                      if (!isActive) {
                        e.currentTarget.style.backgroundColor = `${frameColorHex}20`;
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (!isActive) {
                        e.currentTarget.style.backgroundColor = 'transparent';
                      }
                    }}
                  >
                    {actionType.label}
                  </button>
                );
              })}
            </div>
            
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∞—Ç–∞–∫ */}
            {activeActionType === "attack" && (
              <div className="mt-5">
                <div 
                  className="text-xs font-semibold uppercase mb-4 flex items-center justify-between pb-2"
                  style={{
                    borderBottom: `1px solid ${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}60`
                  }}
                >
                  <div className="flex items-center">
                    <span style={{ color: frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54' }}>
                      –î–ï–ô–°–¢–í–ò–Ø
                    </span>
                    <span className="text-gray-400 ml-2">‚Ä¢ –ê—Ç–∞–∫ –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ: {getAttacksPerAction()}</span>
                    <span className="text-gray-400 ml-2">‚Ä¢ –ê–ö–¢–ò–í–ù–´–ô –ù–ê–ë–û–†:</span>
                    
                    {/* –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ */}
                    <div className="flex gap-1 ml-2">
                      <button
                        onClick={() => onSwitchWeaponSlot?.(1)}
                        className={`px-3 py-1 text-sm font-semibold rounded transition-all duration-200 w-[25px] h-[25px] flex items-center justify-center ${
                          (equipped?.activeWeaponSlot || 1) === 1 
                            ? 'text-white' 
                            : 'text-gray-500 hover:text-gray-300'
                        }`}
                        style={{
                          backgroundColor: (equipped?.activeWeaponSlot || 1) === 1 
                            ? (frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54')
                            : 'transparent',
                          border: `1px solid ${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}40`
                        }}
                      >
                        I
                      </button>
                      <button
                        onClick={() => onSwitchWeaponSlot?.(2)}
                        className={`px-3 py-1 text-sm font-semibold rounded transition-all duration-200 w-[25px] h-[25px] flex items-center justify-center ${
                          (equipped?.activeWeaponSlot || 1) === 2 
                            ? 'text-white' 
                            : 'text-gray-500 hover:text-gray-300'
                        }`}
                        style={{
                          backgroundColor: (equipped?.activeWeaponSlot || 1) === 2 
                            ? (frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54')
                            : 'transparent',
                          border: `1px solid ${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}40`
                        }}
                      >
                        II
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è */}
            <div className="space-y-2 text-sm">
              {activeActionType === "attack" && (
                <div>
                  {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã */}
                  <div className="grid gap-2 text-sm font-semibold uppercase text-gray-400 mb-2 pb-1 items-center" 
                       style={{ 
                         gridTemplateColumns: '2fr 1fr 1fr 1fr',
                         borderBottom: `1px solid ${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}20` 
                       }}>
                    <div className="flex items-center justify-start">–ê–¢–ê–ö–ê</div>
                    <div className="flex items-center justify-center">–î–ê–õ–¨–ù–û–°–¢–¨</div>
                    <div className="flex items-center justify-center">–ü–û–ü–ê–î–ê–ù–ò–ï</div>
                    <div className="flex items-center justify-center">–£–†–û–ù</div>
                  </div>
                  
                  {/* –°—Ç—Ä–æ–∫–∏ —Å –æ—Ä—É–∂–∏–µ–º –∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º–∏ */}
                  {(() => {
                    const allActions = [];
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä—É–∂–∏–µ
                    allWeapons.forEach((weapon, i) => {
                      allActions.push({ type: 'weapon', data: weapon, index: i });
                    });
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
                    if (characterData?.spells?.length > 0) {
                      characterData.spells.forEach((spell: string, i: number) => {
                        allActions.push({ type: 'spell', data: spell, index: i });
                      });
                    }
                    
                    if (allActions.length === 0) {
                      return (
                        <div className="text-center text-gray-500 text-sm py-4">
                          –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                        </div>
                      );
                    }
                    
                    return allActions.map((action, i) => {
                      if (action.type === 'weapon') {
                        const weapon = action.data;
                        const attackBonus = getAttackBonus(weapon);
                        const damage = getDamage(weapon);
                        const weaponData = Weapons.find(w => w.name === weapon.name);
                        const range = weaponData?.range || (weaponData?.type === 'melee' ? '5 —Ñ—Ç.' : '-');
                        
                        return (
                          <div key={`weapon-${action.index}`}>
                            <div className={`grid gap-2 text-sm py-1 items-center ${!weapon.isActive ? 'opacity-60' : ''}`}
                                 style={{ gridTemplateColumns: '2fr 1fr 1fr 1fr' }}>
                              <div className="text-gray-200 truncate flex items-center justify-start">
                                <span className="text-sm text-gray-500 mr-1 w-3 inline-block text-center">{weapon.slot === 1 ? 'I' : 'II'}</span>
                                {weapon.name}
                              </div>
                              <div className="text-gray-300 flex items-center justify-center">{range}</div>
                              <div 
                                className="text-gray-300 font-semibold border-2 w-[70px] rounded-md px-2 py-1 cursor-pointer transition-all duration-200 flex items-center justify-center mx-auto"
                                style={{
                                  borderColor: `${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}40`,
                                  backgroundColor: 'transparent'
                                }}
                                onClick={() => handleAttack(weapon, weaponData?.type === 'ranged' ? 'dex' : 'str', attackBonus)}
                                onMouseEnter={(e) => {
                                  const lightColor = criticalHits[`${weapon.name}-${weapon.slot}`] 
                                    ? '#F59E0B' 
                                    : frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54';
                                  e.currentTarget.style.backgroundColor = `${lightColor}20`;
                                }}
                                onMouseLeave={(e) => {
                                  e.currentTarget.style.backgroundColor = criticalHits[`${weapon.name}-${weapon.slot}`] 
                                    ? '#F59E0B20' 
                                    : 'transparent';
                                }}
                              >
                                {attackBonus > 0 ? `+${attackBonus}` : attackBonus === 0 ? '0' : attackBonus}
                              </div>
                              <div className="relative flex items-center justify-center mx-auto">
                                {/* –ú–æ–ª–Ω–∏—è —Å–ª–µ–≤–∞ –æ—Ç —Ä–∞–º–∫–∏ (–∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ) */}
                                {criticalHits[`${weapon.name}-${weapon.slot}`] && (
                                  <span className="absolute -left-6 text-yellow-400 text-lg animate-pulse z-10">
                                    ‚ö°
                                  </span>
                                )}
                                
                                {/* –†–∞–º–∫–∞ —Å —É—Ä–æ–Ω–æ–º */}
                                <div 
                                  className={`border-2 w-[70px] rounded-md px-1 py-1 cursor-pointer transition-all duration-200 flex items-center justify-center ${
                                    criticalHits[`${weapon.name}-${weapon.slot}`] 
                                      ? 'text-yellow-300 font-bold animate-pulse' 
                                      : 'text-gray-300'
                                  }`}
                                  style={{
                                    borderColor: criticalHits[`${weapon.name}-${weapon.slot}`] 
                                      ? '#F59E0B' 
                                      : `${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}40`,
                                    backgroundColor: criticalHits[`${weapon.name}-${weapon.slot}`] 
                                      ? '#F59E0B20' 
                                      : 'transparent'
                                  }}
                                  onClick={() => {
                                    const weaponData = Weapons.find(w => w.name === weapon.name);
                                    const weaponType = weaponData?.type || 'melee';
                                    const abilityModifier = weaponType === 'ranged' ? 
                                      Math.floor(((stats?.dex || 10) - 10) / 2) : 
                                      Math.floor(((stats?.str || 10) - 10) / 2);
                                    handleDamage(weapon, weaponType === 'ranged' ? 'dex' : 'str', abilityModifier, damage);
                                  }}
                                  onMouseEnter={(e) => {
                                    const lightColor = criticalHits[`${weapon.name}-${weapon.slot}`] 
                                      ? '#F59E0B' 
                                      : frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54';
                                    e.currentTarget.style.backgroundColor = `${lightColor}20`;
                                  }}
                                  onMouseLeave={(e) => {
                                    e.currentTarget.style.backgroundColor = criticalHits[`${weapon.name}-${weapon.slot}`] 
                                      ? '#F59E0B20' 
                                      : 'transparent';
                                  }}
                                >
                                  {damage}
                                </div>
                              </div>
                            </div>
                            
                            {/* –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π) */}
                            {i < allActions.length - 1 && (
                              <div 
                                className="my-1 h-px"
                                style={{
                                  borderTop: `1px dotted ${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}40`
                                }}
                              />
                            )}
                          </div>
                        );
                      } else if (action.type === 'spell') {
                        const spellKey = action.data;
                        const spellName = getSpellName(spellKey);
                        const spellData = getSpellData(spellKey);
                        // –î–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–∞—Ä–∏–∑–º—É (–ø–∞–ª–∞–¥–∏–Ω)
                        const spellAbility = 'cha';
                        const spellModifier = Math.floor(((stats?.[spellAbility] || 10) - 10) / 2);
                        const spellAttackBonus = spellModifier + (proficiencyBonus || 0);
                        
                        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
                        let spellRange = spellData?.range || "60 —Ñ—Ç.";
                        
                        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
                        if (typeof spellRange === 'number') {
                          spellRange = spellRange.toString();
                        }
                        
                        // –ï—Å–ª–∏ –¥–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º "—Ñ—Ç."
                        if (spellRange && typeof spellRange === 'string' && !spellRange.includes('—Ñ—Ç') && !spellRange.includes('–º') && !spellRange.includes('–∫–º') && !spellRange.includes('–Ω–∞ —Å–µ–±—è') && !spellRange.toLowerCase().includes('–∫–∞—Å–∞–Ω–∏–µ')) {
                          spellRange = `${spellRange} —Ñ—Ç.`;
                        }
                        
                        // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è (–±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
                        const spellDamage = spellData?.damage?.dice || "1d10";
                        
                        return (
                          <div key={`spell-${action.index}`}>
                            <div className="grid gap-2 text-sm py-1 items-center"
                                 style={{ gridTemplateColumns: '2fr 1fr 1fr 1fr' }}>
                              <div className="text-gray-200 truncate flex items-center justify-start">
                                <span className="text-sm text-gray-500 mr-1 w-3 inline-block text-center">‚òÖ</span>
                                {spellName}
                              </div>
                              <div className="text-gray-300 flex items-center justify-center">{spellRange}</div>
                              <div 
                                className="text-gray-300 font-semibold border-2 w-[70px] rounded-md px-2 py-1 cursor-pointer transition-all duration-200 flex items-center justify-center mx-auto"
                                style={{
                                  borderColor: `${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}40`,
                                  backgroundColor: 'transparent'
                                }}
                                onClick={() => handleAttack(spellName, spellAbility, spellAttackBonus, true)}
                                onMouseEnter={(e) => {
                                  const lightColor = criticalHits[`spell-${spellName}`] 
                                    ? '#F59E0B' 
                                    : frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54';
                                  e.currentTarget.style.backgroundColor = `${lightColor}20`;
                                }}
                                onMouseLeave={(e) => {
                                  e.currentTarget.style.backgroundColor = criticalHits[`spell-${spellName}`] 
                                    ? '#F59E0B20' 
                                    : 'transparent';
                                }}
                              >
                                {spellAttackBonus > 0 ? `+${spellAttackBonus}` : spellAttackBonus === 0 ? '0' : spellAttackBonus}
                              </div>
                              <div className="relative flex items-center justify-center mx-auto">
                                {/* –ò–∫–æ–Ω–∫–∞ —Ç–∏–ø–∞ —É—Ä–æ–Ω–∞ —Å–ª–µ–≤–∞ –æ—Ç —Ä–∞–º–∫–∏ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π */}
                                {criticalHits[`spell-${spellName}`] && (
                                  <span 
                                    className="absolute -left-6 text-lg animate-pulse z-10"
                                    style={{ 
                                      color: getDamageColor(spellData?.damage?.type).text,
                                      filter: spellData?.damage?.type === "–ú–æ–ª–Ω–∏—è" ? "hue-rotate(200deg) saturate(1.5)" : 
                                             spellData?.damage?.type === "–°–∏–ª–æ–≤–æ–π" ? "hue-rotate(0deg) saturate(0.3) brightness(1.2)" :
                                             spellData?.damage?.type === "–î—É—Ö–æ–≤–Ω—ã–π" ? "hue-rotate(45deg) saturate(1.2) brightness(1.1)" : "none"
                                    }}
                                  >
                                    {getDamageIcon(spellData?.damage?.type)}
                                  </span>
                                )}
                                
                                {/* –†–∞–º–∫–∞ —Å —É—Ä–æ–Ω–æ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è */}
                                <div 
                                  className={`border-2 w-[70px] rounded-md px-1 py-1 cursor-pointer transition-all duration-200 flex items-center justify-center ${
                                    criticalHits[`spell-${spellName}`] 
                                      ? 'font-bold animate-pulse' 
                                      : 'text-gray-300'
                                  }`}
                                  style={{
                                    borderColor: criticalHits[`spell-${spellName}`] 
                                      ? getDamageColor(spellData?.damage?.type).border
                                      : `${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}40`,
                                    backgroundColor: criticalHits[`spell-${spellName}`] 
                                      ? getDamageColor(spellData?.damage?.type).bg
                                      : 'transparent',
                                    color: criticalHits[`spell-${spellName}`] 
                                      ? getDamageColor(spellData?.damage?.type).text
                                      : '#D1D5DB'
                                  }}
                                  onClick={() => {
                                    const criticalDamage = criticalHits[`spell-${spellName}`] ? 
                                      spellDamage.replace(/(\d+)d(\d+)/, (match, num, size) => `${parseInt(num) * 2}d${size}`) : 
                                      spellDamage;
                                    handleDamage(spellName, spellAbility, 0, criticalDamage, true);
                                  }}
                                  onMouseEnter={(e) => {
                                    const lightColor = criticalHits[`spell-${spellName}`] 
                                      ? getDamageColor(spellData?.damage?.type).border
                                      : frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54';
                                    e.currentTarget.style.backgroundColor = `${lightColor}20`;
                                  }}
                                  onMouseLeave={(e) => {
                                    e.currentTarget.style.backgroundColor = criticalHits[`spell-${spellName}`] 
                                      ? getDamageColor(spellData?.damage?.type).bg
                                      : 'transparent';
                                  }}
                                >
                                  {criticalHits[`spell-${spellName}`] ? 
                                    spellDamage.replace(/(\d+)d(\d+)/, (match, num, size) => `${parseInt(num) * 2}d${size}`) : 
                                    spellDamage
                                  }
                                </div>
                              </div>
                            </div>
                            
                            {/* –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π) */}
                            {i < allActions.length - 1 && (
                              <div 
                                className="my-1 h-px"
                                style={{
                                  borderTop: `1px dotted ${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}40`
                                }}
                              />
                            )}
                          </div>
                        );
                      }
                      return null;
                    });
                  })()}
                </div>
              )}
                
                {/* –¢–∞–±–ª–∏—Ü–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π */}
                <div className="mt-6">
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π */}
                  <div 
                    className="text-xs font-semibold uppercase mb-2 flex items-center mt-6 pb-2"
                    style={{
                      borderBottom: `1px solid ${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}60`
                    }}
                  >
                    <span style={{ color: frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54' }}>
                      –ë–û–ù–£–°–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø
                    </span>
                  </div>
                  
                  {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã */}
                  <div className="grid gap-2 text-sm font-semibold uppercase text-gray-400 mb-2 pb-1 items-center mt-4" 
                       style={{ 
                         gridTemplateColumns: '2fr 1fr 1fr 1fr',
                         borderBottom: `1px solid ${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}20` 
                       }}>
                    <div className="flex items-center justify-start">–ê–¢–ê–ö–ê</div>
                    <div className="flex items-center justify-center">–î–ê–õ–¨–ù–û–°–¢–¨</div>
                    <div className="flex items-center justify-center">–ü–û–ü–ê–î–ê–ù–ò–ï</div>
                    <div className="flex items-center justify-center">–£–†–û–ù</div>
                  </div>
                  
                  {/* –°—Ç—Ä–æ–∫–∏ —Å –±–æ–Ω—É—Å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ */}
                  {(() => {
                    const bonusActions = [];
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –±–æ–Ω—É—Å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                    if (characterData?.spells?.length > 0) {
                      characterData.spells.forEach((spell: string, i: number) => {
                        const spellData = getSpellData(spell);
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
                        if (spellData?.castingTime === "–±–æ–Ω—É—Å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ" || 
                            spellData?.castingTime === "–ë–æ–Ω—É—Å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ" ||
                            spellData?.castingTime === "1 –±–æ–Ω—É—Å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ") {
                          bonusActions.push({ type: 'spell', data: spell, index: i });
                        }
                      });
                    }
                    
                    if (bonusActions.length === 0) {
                      return (
                        <div className="text-center text-gray-500 text-sm py-4">
                          –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ–Ω—É—Å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                        </div>
                      );
                    }
                    
                    return bonusActions.map((action, i) => {
                      if (action.type === 'spell') {
                        const spellKey = action.data;
                        const spellName = getSpellName(spellKey);
                        const spellData = getSpellData(spellKey);
                        const spellAbility = 'cha';
                        const spellModifier = Math.floor(((stats?.[spellAbility] || 10) - 10) / 2);
                        const spellAttackBonus = spellModifier + (proficiencyBonus || 0);
                        
                        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
                        let spellRange = spellData?.range || "60 —Ñ—Ç.";
                        
                        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
                        if (typeof spellRange === 'number') {
                          spellRange = spellRange.toString();
                        }
                        
                        // –ï—Å–ª–∏ –¥–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º "—Ñ—Ç."
                        if (spellRange && typeof spellRange === 'string' && !spellRange.includes('—Ñ—Ç') && !spellRange.includes('–º') && !spellRange.includes('–∫–º') && !spellRange.includes('–Ω–∞ —Å–µ–±—è') && !spellRange.toLowerCase().includes('–∫–∞—Å–∞–Ω–∏–µ')) {
                          spellRange = `${spellRange} —Ñ—Ç.`;
                        }
                        
                        // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è (–±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
                        const spellDamage = spellData?.damage?.dice || "1d10";
                        
                        return (
                          <div key={`bonus-spell-${action.index}`}>
                            <div className="grid gap-2 text-sm py-1 items-center"
                                 style={{ gridTemplateColumns: '2fr 1fr 1fr 1fr' }}>
                              <div className="text-gray-200 truncate flex items-center justify-start">
                                <span className="text-sm text-gray-500 mr-1 w-3 inline-block text-center">‚òÖ</span>
                                {spellName}
                              </div>
                              <div className="text-gray-300 flex items-center justify-center">{spellRange}</div>
                              <div 
                                className="text-gray-300 font-semibold border-2 w-[70px] rounded-md px-2 py-1 cursor-pointer transition-all duration-200 flex items-center justify-center mx-auto"
                                style={{
                                  borderColor: `${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}40`,
                                  backgroundColor: 'transparent'
                                }}
                                onClick={() => handleAttack(spellName, spellAbility, spellAttackBonus, true)}
                                onMouseEnter={(e) => {
                                  const lightColor = criticalHits[`spell-${spellName}`] 
                                    ? '#F59E0B' 
                                    : frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54';
                                  e.currentTarget.style.backgroundColor = `${lightColor}20`;
                                }}
                                onMouseLeave={(e) => {
                                  e.currentTarget.style.backgroundColor = criticalHits[`spell-${spellName}`] 
                                    ? '#F59E0B20' 
                                    : 'transparent';
                                }}
                              >
                                {spellAttackBonus > 0 ? `+${spellAttackBonus}` : spellAttackBonus === 0 ? '0' : spellAttackBonus}
                              </div>
                              <div className="relative flex items-center justify-center mx-auto">
                                {/* –ò–∫–æ–Ω–∫–∞ —Ç–∏–ø–∞ —É—Ä–æ–Ω–∞ —Å–ª–µ–≤–∞ –æ—Ç —Ä–∞–º–∫–∏ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π */}
                                {criticalHits[`spell-${spellName}`] && (
                                  <span 
                                    className="absolute -left-6 text-lg animate-pulse z-10"
                                    style={{ 
                                      color: getDamageColor(spellData?.damage?.type).text,
                                      filter: spellData?.damage?.type === "–ú–æ–ª–Ω–∏—è" ? "hue-rotate(200deg) saturate(1.5)" : 
                                             spellData?.damage?.type === "–°–∏–ª–æ–≤–æ–π" ? "hue-rotate(0deg) saturate(0.3) brightness(1.2)" :
                                             spellData?.damage?.type === "–î—É—Ö–æ–≤–Ω—ã–π" ? "hue-rotate(45deg) saturate(1.2) brightness(1.1)" : "none"
                                    }}
                                  >
                                    {getDamageIcon(spellData?.damage?.type)}
                                  </span>
                                )}
                                
                                {/* –†–∞–º–∫–∞ —Å —É—Ä–æ–Ω–æ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è */}
                                <div 
                                  className={`border-2 w-[70px] rounded-md px-1 py-1 cursor-pointer transition-all duration-200 flex items-center justify-center ${
                                    criticalHits[`spell-${spellName}`] 
                                      ? 'font-bold animate-pulse' 
                                      : 'text-gray-300'
                                  }`}
                                  style={{
                                    borderColor: criticalHits[`spell-${spellName}`] 
                                      ? getDamageColor(spellData?.damage?.type).border
                                      : `${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}40`,
                                    backgroundColor: criticalHits[`spell-${spellName}`] 
                                      ? getDamageColor(spellData?.damage?.type).bg
                                      : 'transparent',
                                    color: criticalHits[`spell-${spellName}`] 
                                      ? getDamageColor(spellData?.damage?.type).text
                                      : '#D1D5DB'
                                  }}
                                  onClick={() => {
                                    const criticalDamage = criticalHits[`spell-${spellName}`] ? 
                                      spellDamage.replace(/(\d+)d(\d+)/, (match, num, size) => `${parseInt(num) * 2}d${size}`) : 
                                      spellDamage;
                                    handleDamage(spellName, spellAbility, 0, criticalDamage, true);
                                  }}
                                  onMouseEnter={(e) => {
                                    const lightColor = criticalHits[`spell-${spellName}`] 
                                      ? getDamageColor(spellData?.damage?.type).border
                                      : frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54';
                                    e.currentTarget.style.backgroundColor = `${lightColor}20`;
                                  }}
                                  onMouseLeave={(e) => {
                                    e.currentTarget.style.backgroundColor = criticalHits[`spell-${spellName}`] 
                                      ? getDamageColor(spellData?.damage?.type).bg
                                      : 'transparent';
                                  }}
                                >
                                  {criticalHits[`spell-${spellName}`] ? 
                                    spellDamage.replace(/(\d+)d(\d+)/, (match, num, size) => `${parseInt(num) * 2}d${size}`) : 
                                    spellDamage
                                  }
                                </div>
                              </div>
                            </div>
                            
                            {/* –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π) */}
                            {i < bonusActions.length - 1 && (
                              <div 
                                className="my-1 h-px"
                                style={{
                                  borderTop: `1px dotted ${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}40`
                                }}
                              />
                            )}
                          </div>
                        );
                      }
                      return null;
                    });
                  })()}
                </div>              
              {activeActionType === "action" && (
                <div className="text-center text-gray-500 text-sm py-4">
                  –î–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –∑–¥–µ—Å—å
                </div>
              )}
              
              {activeActionType === "bonus" && (
                <div className="text-center text-gray-500 text-sm py-4">
                  –ë–æ–Ω—É—Å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ê–¢–ê–ö–ê"
                </div>
              )}
              
              {activeActionType === "reaction" && (
                <div className="text-center text-gray-500 text-sm py-4">
                  –†–µ–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –∑–¥–µ—Å—å
                </div>
              )}
            </div>
          </div>
        );
      case "spells":
        return (
          <div>
            {/* –ó–∞–≥–æ–≤–æ—Ä—ã (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã) */}
            <div className="mb-4">
              <div 
                className="text-xs font-semibold uppercase mb-2 text-gray-400"
                style={{
                  borderBottom: `1px solid ${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}20`
                }}
              >
                –ó–ê–ì–û–í–û–†–´ (0 —É—Ä–æ–≤–µ–Ω—å)
              </div>
              <div className="text-sm text-gray-300 space-y-1">
                {characterData?.spells?.length > 0 ? (
                  characterData.spells.map((spell: string, index: number) => (
                    <div 
                      key={index} 
                      className="py-2 px-3 hover:bg-gray-700 rounded cursor-pointer transition-colors duration-200 border border-transparent hover:border-gray-600"
                      onClick={() => {
                        const spellModifier = Math.floor(((stats?.cha || 10) - 10) / 2);
                        const spellAttackBonus = spellModifier + (proficiencyBonus || 0);
                        handleAttack(spell, 'cha', spellAttackBonus, true);
                      }}
                    >
                      <div className="font-medium text-gray-200">{spell}</div>
                      <div className="text-xs text-gray-400">–ó–∞–≥–æ–≤–æ—Ä ‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ</div>
                    </div>
                  ))
                ) : (
                  <div className="text-gray-500 text-center py-4">
                    –ù–µ—Ç –∑–∞–≥–æ–≤–æ—Ä–æ–≤
                  </div>
                )}
              </div>
            </div>
            
            {/* –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è */}
            <div>
              <div 
                className="text-xs font-semibold uppercase mb-2 text-gray-400"
                style={{
                  borderBottom: `1px solid ${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}20`
                }}
              >
                –ü–û–î–ì–û–¢–û–í–õ–ï–ù–ù–´–ï –ó–ê–ö–õ–ò–ù–ê–ù–ò–Ø
              </div>
              <div className="text-sm text-gray-300">
                <div className="text-gray-500 text-center py-4">
                  –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
                </div>
              </div>
            </div>
          </div>
        );
      case "inventory":
        const currentWeight = calculateTotalWeight();
        const maxWeight = calculateMaxCarryWeight();
        const currency = getCurrency();
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–¥–µ—Ç–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const getEquippedItems = () => {
          const equippedItems = [];
          
          // –î–æ—Å–ø–µ—Ö–∏
          if (localEquipped.armor) {
            equippedItems.push({
              name: localEquipped.armor,
              type: 'armor',
              set: 'armor',
              weight: getItemWeight(localEquipped.armor),
              cost: getItemCost(localEquipped.armor),
              quantity: getItemQuantity(localEquipped.armor),
              equipped: true,
              slots: 1,
              isVersatile: false,
              versatileMode: false
            });
          }
          
          // –û—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–æ—Ä
          localEquipped.mainSet.forEach(item => {
            const itemType = getItemType(item.name);
            equippedItems.push({
              name: item.name,
              type: itemType,
              set: 'main',
              weight: getItemWeight(item.name),
              cost: getItemCost(item.name),
              quantity: getItemQuantity(item.name),
              equipped: true,
              slots: item.slots,
              isVersatile: item.isVersatile,
              versatileMode: item.versatileMode
            });
          });
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä
          localEquipped.additionalSet.forEach(item => {
            const itemType = getItemType(item.name);
            equippedItems.push({
              name: item.name,
              type: itemType,
              set: 'additional',
              weight: getItemWeight(item.name),
              cost: getItemCost(item.name),
              quantity: getItemQuantity(item.name),
              equipped: true,
              slots: item.slots,
              isVersatile: item.isVersatile,
              versatileMode: item.versatileMode
            });
          });
          
          return equippedItems;
        };
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Ä—é–∫–∑–∞–∫–∞ (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã)
        const getBackpackItems = () => {
          if (!characterData?.equipment) return [];
          
          // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
          const allEquippedItems = [
            ...(localEquipped.armor ? [localEquipped.armor] : []),
            ...localEquipped.mainSet.map(item => item.name),
            ...localEquipped.additionalSet.map(item => item.name)
          ];
          
          return characterData.equipment
            .filter((item: string) => {
              const cleanName = item.replace(/^\d+x\s+/, '');
              return !allEquippedItems.includes(cleanName);
            })
            .map((item: string) => ({
              name: item,
              type: getItemType(item),
              weight: getItemWeight(item),
              cost: getItemCost(item),
              quantity: getItemQuantity(item),
              equipped: false
            }));
        };
        
        const equippedItems = getEquippedItems();
        const backpackItems = getBackpackItems();
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥—Ä–∞—Ñ—Ç
        const saveEquipmentChanges = () => {
          if (!equipped) return;
          
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç equipped
          const mainWeapons = localEquipped.mainSet
            .filter(item => getItemType(item.name) === 'weapon')
            .map(item => ({
              name: item.name,
              type: 'weapon' as const,
              slots: item.slots,
              isVersatile: item.isVersatile,
              versatileMode: item.versatileMode
            }));
          
          const additionalWeapons = localEquipped.additionalSet
            .filter(item => getItemType(item.name) === 'weapon')
            .map(item => ({
              name: item.name,
              type: 'weapon' as const,
              slots: item.slots,
              isVersatile: item.isVersatile,
              versatileMode: item.versatileMode
            }));
          
          const mainShields = localEquipped.mainSet
            .filter(item => getItemType(item.name) === 'shield')
            .map(item => ({
              name: item.name,
              type: 'shield' as const,
              slots: item.slots,
              isVersatile: item.isVersatile,
              versatileMode: item.versatileMode
            }));
          
          const additionalShields = localEquipped.additionalSet
            .filter(item => getItemType(item.name) === 'shield')
            .map(item => ({
              name: item.name,
              type: 'shield' as const,
              slots: item.slots,
              isVersatile: item.isVersatile,
              versatileMode: item.versatileMode
            }));
          
          // –û–±–Ω–æ–≤–ª—è–µ–º equipped
          const updatedEquipped = {
            ...equipped,
            weaponSlot1: mainWeapons,
            weaponSlot2: additionalWeapons,
            shield1: mainShields[0] || null,
            shield2: additionalShields[0] || null,
            armor: localEquipped.armor ? {
              name: localEquipped.armor,
              type: 'armor' as const,
              slots: 1,
              isVersatile: false,
              versatileMode: false
            } : null
          };
          
          // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è equipped –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
          if (onUpdateEquipped) {
            onUpdateEquipped(updatedEquipped);
          }
        };
        
        return (
          <div>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤–µ—Å–æ–º –∏ –≤–∞–ª—é—Ç–æ–π */}
            <div className="flex justify-between items-center mb-4">
              <div className="text-sm font-semibold text-gray-300">
                –ü–ï–†–ï–ù–û–°–ò–ú–´–ô –í–ï–°: 
                <span className={`ml-2 ${isOverloaded(currentWeight) ? 'text-red-400' : 'text-gray-200'}`}>
                  {currentWeight}/{maxWeight}
                </span>
              </div>
              <div className="flex items-center gap-4">
                {currency && (
                  <div className="text-sm font-semibold text-yellow-400">
                    {currency}
                  </div>
                )}
                <button
                  className="px-3 py-1 text-xs font-semibold rounded border"
                  style={{
                    borderColor: frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54',
                    backgroundColor: frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54',
                    color: '#000'
                  }}
                  onClick={saveEquipmentChanges}
                >
                  –°–û–•–†–ê–ù–ò–¢–¨
                </button>
              </div>
            </div>
            
            {/* –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –±–ª–æ–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è */}
            <div className="overflow-y-auto space-y-6">
              {/* –ë–ª–æ–∫ –≠–ö–ò–ü–ò–†–û–í–ö–ê */}
              <div>
                <div className="text-sm font-semibold text-gray-300 mb-2">–≠–ö–ò–ü–ò–†–û–í–ö–ê</div>
                
                {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã */}
                <div className="grid gap-2 text-sm font-semibold uppercase text-gray-400 mb-2 pb-1 items-center" 
                     style={{ 
                       gridTemplateColumns: '1fr 2fr 1fr 1fr 1fr',
                       borderBottom: `1px solid ${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}20` 
                     }}>
                  <div className="text-center">‚úì</div>
                  <div className="flex items-center justify-start">–ù–ê–ó–í–ê–ù–ò–ï</div>
                  <div className="text-center">–í–ï–°</div>
                  <div className="text-center">–ö–õ–í</div>
                  <div className="text-center">–¶–ï–ù–ê</div>
                </div>
                
                {/* –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã */}
                <div className="space-y-1">
                  {/* –î–æ—Å–ø–µ—Ö–∏ (—Ç–æ–ª—å–∫–æ –¥–æ—Å–ø–µ—Ö–∏, –Ω–µ —â–∏—Ç—ã) */}
                  <div className="text-xs text-gray-400 mt-2 mb-1 font-semibold uppercase flex items-center gap-2">
                    –î–û–°–ü–ï–•
                    <div className="flex gap-1">
                      <div
                        className="w-2 h-2 rounded-full"
                        style={{
                          backgroundColor: localEquipped.armor
                            ? (frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54')
                            : '#4B5563'
                        }}
                      />
                    </div>
                  </div>
                  {equippedItems.filter(item => item.set === 'armor' && item.type === 'armor').length > 0 ? (
                    equippedItems.filter(item => item.set === 'armor' && item.type === 'armor').map((item, index) => (
                      <div key={`armor-${index}`}>
                        <div className="grid gap-2 text-sm py-1 items-center"
                             style={{ gridTemplateColumns: '1fr 2fr 1fr 1fr 1fr' }}>
                          <div className="flex justify-center items-center">
                            <div 
                              className="w-4 h-4 rounded-none border-2 cursor-pointer hover:opacity-80"
                              style={{
                                borderColor: frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54',
                                backgroundColor: item.equipped ? (frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54') : '#171717'
                              }}
                              onClick={() => toggleItemEquipped(item.name)}
                            />
                          </div>
                          <div className="text-gray-200 truncate">{item.name}</div>
                          <div className="text-gray-400 text-center">{item.weight} —Ñ–Ω—Ç.</div>
                          <div className="text-gray-400 text-center">{item.quantity}</div>
                          <div className="text-gray-400 text-center">{item.cost}</div>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center text-gray-500 text-sm py-2">
                      –ù–µ—Ç –Ω–∞–¥–µ—Ç–æ–≥–æ –¥–æ—Å–ø–µ—Ö–∞
                    </div>
                  )}
                  
                  {/* –û—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–æ—Ä (I) */}
                  <div className="text-xs text-gray-400 mt-2 mb-1 font-semibold uppercase flex items-center gap-2">
                    –û–°–ù–û–í–ù–û–ô –ù–ê–ë–û–†
                        <div className="flex gap-1">
                          {Array.from({ length: 2 }, (_, i) => (
                            <div
                              key={i}
                              className="w-2 h-2 rounded-full"
                              style={{
                                backgroundColor: i < getUsedSlotsCount(localEquipped.mainSet)
                                  ? (frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54')
                                  : '#4B5563'
                              }}
                            />
                          ))}
                        </div>
                  </div>
                  {equippedItems.filter(item => item.set === 'main').length > 0 ? (
                    equippedItems.filter(item => item.set === 'main').map((item, index) => (
                      <div key={`main-${index}`}>
                        <div className="grid gap-2 text-sm py-1 items-center"
                             style={{ gridTemplateColumns: '1fr 2fr 1fr 1fr 1fr' }}>
                          <div className="flex justify-center items-center">
                            <div 
                              className="w-4 h-4 rounded-none border-2 cursor-pointer hover:opacity-80"
                              style={{
                                borderColor: frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54',
                                backgroundColor: item.equipped ? (frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54') : '#171717'
                              }}
                              onClick={() => toggleItemEquipped(item.name)}
                            />
                          </div>
                          <div className="text-gray-200 truncate flex items-center gap-2">
                            {item.name}
                            {item.isVersatile && (
                              <button
                                className="text-xs px-2 py-1 rounded border"
                                style={{
                                  borderColor: frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54',
                                  backgroundColor: item.versatileMode ? (frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54') : 'transparent',
                                  color: item.versatileMode ? '#000' : (frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54')
                                }}
                                onClick={() => toggleVersatileMode(item.name)}
                                title={item.versatileMode ? '–î–≤—É—Ä—É—á–Ω—ã–π —Ä–µ–∂–∏–º (2 —Å–ª–æ—Ç–∞)' : '–û–¥–Ω–æ—Ä—É—á–Ω—ã–π —Ä–µ–∂–∏–º (1 —Å–ª–æ—Ç)'}
                              >
                                {item.versatileMode ? '2H' : '1H'}
                              </button>
                            )}
                          </div>
                          <div className="text-gray-400 text-center">{item.weight} —Ñ–Ω—Ç.</div>
                          <div className="text-gray-400 text-center">{item.quantity}</div>
                          <div className="text-gray-400 text-center">{item.cost}</div>
                        </div>
                        {index < equippedItems.filter(item => item.set === 'main').length - 1 && (
                          <div 
                            className="my-1 h-px"
                            style={{
                              borderTop: `1px dotted ${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}40`
                            }}
                          />
                        )}
                      </div>
                    ))
                  ) : (
                    <div className="text-center text-gray-500 text-sm py-2">
                      –û—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–æ—Ä –ø—É—Å—Ç
                    </div>
                  )}
                  
                  {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä (II) */}
                  <div className="text-xs text-gray-400 mt-2 mb-1 font-semibold uppercase flex items-center gap-2">
                    –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ù–ê–ë–û–†
                        <div className="flex gap-1">
                          {Array.from({ length: 2 }, (_, i) => (
                            <div
                              key={i}
                              className="w-2 h-2 rounded-full"
                              style={{
                                backgroundColor: i < getUsedSlotsCount(localEquipped.additionalSet)
                                  ? (frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54')
                                  : '#4B5563'
                              }}
                            />
                          ))}
                        </div>
                  </div>
                  {equippedItems.filter(item => item.set === 'additional').length > 0 ? (
                    equippedItems.filter(item => item.set === 'additional').map((item, index) => (
                      <div key={`additional-${index}`}>
                        <div className="grid gap-2 text-sm py-1 items-center"
                             style={{ gridTemplateColumns: '1fr 2fr 1fr 1fr 1fr' }}>
                          <div className="flex justify-center items-center">
                            <div 
                              className="w-4 h-4 rounded-none border-2 cursor-pointer hover:opacity-80"
                              style={{
                                borderColor: frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54',
                                backgroundColor: item.equipped ? (frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54') : '#171717'
                              }}
                              onClick={() => toggleItemEquipped(item.name)}
                            />
                          </div>
                          <div className="text-gray-200 truncate flex items-center gap-2">
                            {item.name}
                            {item.isVersatile && (
                              <button
                                className="text-xs px-2 py-1 rounded border"
                                style={{
                                  borderColor: frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54',
                                  backgroundColor: item.versatileMode ? (frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54') : 'transparent',
                                  color: item.versatileMode ? '#000' : (frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54')
                                }}
                                onClick={() => toggleVersatileMode(item.name)}
                                title={item.versatileMode ? '–î–≤—É—Ä—É—á–Ω—ã–π —Ä–µ–∂–∏–º (2 —Å–ª–æ—Ç–∞)' : '–û–¥–Ω–æ—Ä—É—á–Ω—ã–π —Ä–µ–∂–∏–º (1 —Å–ª–æ—Ç)'}
                              >
                                {item.versatileMode ? '2H' : '1H'}
                              </button>
                            )}
                          </div>
                          <div className="text-gray-400 text-center">{item.weight} —Ñ–Ω—Ç.</div>
                          <div className="text-gray-400 text-center">{item.quantity}</div>
                          <div className="text-gray-400 text-center">{item.cost}</div>
                        </div>
                        {index < equippedItems.filter(item => item.set === 'additional').length - 1 && (
                          <div 
                            className="my-1 h-px"
                            style={{
                              borderTop: `1px dotted ${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}40`
                            }}
                          />
                        )}
                      </div>
                    ))
                  ) : (
                    <div className="text-center text-gray-500 text-sm py-2">
                      –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø—É—Å—Ç
                    </div>
                  )}
                  
                  {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                  {process.env.NODE_ENV === 'development' && (
                    <div className="text-xs text-gray-600 mt-2 p-2 bg-gray-800 rounded">
                      Debug: equippedItems.length = {equippedItems.length}<br/>
                      Armor: {equippedItems.filter(item => item.set === 'armor').length}<br/>
                      Main: {equippedItems.filter(item => item.set === 'main').length}<br/>
                      Additional: {equippedItems.filter(item => item.set === 'additional').length}
                    </div>
                  )}
                </div>
              </div>
              
              {/* –¢–∞–±–ª–∏—Ü–∞ –†–Æ–ö–ó–ê–ö */}
              <div>
                <div className="text-sm font-semibold text-gray-300 mb-2">–†–Æ–ö–ó–ê–ö</div>
                
                {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã */}
                <div className="grid gap-2 text-sm font-semibold uppercase text-gray-400 mb-2 pb-1 items-center" 
                     style={{ 
                       gridTemplateColumns: '1fr 2fr 1fr 1fr 1fr',
                       borderBottom: `1px solid ${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}20` 
                     }}>
                  <div className="text-center">‚úì</div>
                  <div className="flex items-center justify-start">–ù–ê–ó–í–ê–ù–ò–ï</div>
                  <div className="text-center">–í–ï–°</div>
                  <div className="text-center">–ö–õ–í</div>
                  <div className="text-center">–¶–ï–ù–ê</div>
                </div>
                
                {/* –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã */}
                <div className="space-y-1">
                  {backpackItems.length > 0 ? (
                    backpackItems.map((item, index) => (
                      <div key={index}>
                        <div className="grid gap-2 text-sm py-1 items-center"
                             style={{ gridTemplateColumns: '1fr 2fr 1fr 1fr 1fr' }}>
                          <div className="flex justify-center items-center">
                            {(item.type === 'weapon' || item.type === 'armor' || item.type === 'shield') ? (
                              <div 
                                className={`w-4 h-4 rounded-none border-2 ${
                                  canEquipItem(item.name) 
                                    ? 'cursor-pointer hover:opacity-80' 
                                    : 'cursor-not-allowed opacity-50'
                                }`}
                                style={{
                                  borderColor: frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54',
                                  backgroundColor: item.equipped ? (frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54') : '#171717'
                                }}
                                onClick={() => canEquipItem(item.name) && toggleItemEquipped(item.name)}
                                title={!canEquipItem(item.name) ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏' : undefined}
                              />
                            ) : (
                              <div className="w-4 h-4" />
                            )}
                          </div>
                          <div className="text-gray-200 truncate">
                            {item.equipped && (item.type === 'weapon' || item.type === 'shield') ? (
                              <span className="text-gray-400 text-xs mr-1">[{item.slot}]</span>
                            ) : null}
                            {item.name}
                          </div>
                          <div className="text-gray-400 text-center">{item.weight} —Ñ–Ω—Ç.</div>
                          <div className="text-gray-400 text-center">{item.quantity}</div>
                          <div className="text-gray-400 text-center">{item.cost}</div>
                        </div>
                        {index < backpackItems.length - 1 && (
                          <div 
                            className="my-1 h-px"
                            style={{
                              borderTop: `1px dotted ${frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54'}40`
                            }}
                          />
                        )}
                      </div>
                    ))
                  ) : (
                    <div className="text-center text-gray-500 text-sm py-4">
                      –†—é–∫–∑–∞–∫ –ø—É—Å—Ç
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        );
      case "features":
        return (
          <div className="text-center text-gray-500 text-sm py-4">
            –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –∑–¥–µ—Å—å
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div
      className="relative text-gray-300 w-[561px] h-[669px] flex-shrink-0"
      style={{
        backgroundImage: "url('/frames/actionFrame.svg')",
        backgroundSize: "100% auto",
        backgroundRepeat: "no-repeat",
        backgroundPosition: "center top",
      }}
    >
      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ —Ä–∞–º–∫–∏ */}
      <div className="relative z-10 px-4 pt-6 pb-4 h-full flex flex-col">
        {/* –í–∫–ª–∞–¥–∫–∏ –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */}
        <div className="flex gap-0 mb-4 flex-shrink-0">
          {tabs.map((tab) => {
            const isActive = activeTab === tab.key;
            const frameColorHex = frameColor === 'gold' ? '#B59E54' : frameColor === 'silver' ? '#C0C0C0' : frameColor === 'copper' ? '#B87333' : '#B59E54';
            
            return (
              <button
                key={tab.key}
                onClick={() => setActiveTab(tab.key)}
                className={`px-3 py-2 text-xs font-semibold uppercase transition-all duration-200 relative`}
                style={{
                  color: isActive ? frameColorHex : '#9CA3AF',
                  borderBottom: isActive ? `2px solid ${frameColorHex}` : 'none'
                }}
              >
                {tab.label}
              </button>
            );
          })}
        </div>
        
        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ —Å —Å–∫—Ä–æ–ª–ª–æ–º */}
        <div className="flex-1 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-gray-800">
          {renderContent()}
        </div>
      </div>
    </div>
  );
}