/* –ü–æ–ª–Ω—ã–π file: character.tsx ‚Äî (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ + –¥–æ–±–∞–≤–ª–µ–Ω—ã spells –∏ –º–µ—Ç–æ–¥—ã) */
import React, {
  createContext,
  useContext,
  useEffect,
  useMemo,
  useState,
} from "react";

// –¢–∏–ø –¥–ª—è —Å–ø–æ—Å–æ–±–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ö–∏—Ç–æ–≤
export type HpMode = "fixed" | "roll";

export type Abilities = {
    str: number;
    dex: number;
    con: number;
    int: number;
    wis: number;
    cha: number;
};

// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
export type Basics = {
  name: string;
  race: string;          // –∫–ª—é—á —Ä–∞—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: "human", "elf")
  subrace?: string;      // –∫–ª—é—á –ø–æ–¥—Ä–∞—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: "high-elf", "hill-dwarf")
  class: string;
  background: string;
  backgroundBonuses?: Partial<Record<keyof Abilities, number>>;
  backgroundSkills?: string[];
  raceBonuses?: Partial<Record<keyof Abilities, number>>;
  alignment: string;
  level: number;
  subclass: string;
  edition: "5e" | string;
  hpMode: HpMode;
  hpCurrent?: number;
};

// (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ Abilities —É —Ç–µ–±—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è/–æ–ø–∏—Å–∞–Ω –≤—ã—à–µ)
export type AsiSelection = {
  mode: "asi" | "feat";
  s1?: keyof Abilities;
  s2?: keyof Abilities;
  feat?: string;
};

// –ü–æ–ª–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
export type CharacterDraft = {
  basics: Basics;        // –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  stats: Abilities;      // –±–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  asi: Record<number, AsiSelection>; // —É–ª—É—á—à–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
  spells: string[]; // —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
};

// –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
const defaultDraft: CharacterDraft = {
  basics: {
    name: "",
    race: "human",       // —Ä–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    class: "fighter",    // –∫–ª–∞—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    background: "entertainer", // –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    backgroundBonuses: {},
    backgroundSkills: [],
    raceBonuses: {},
    alignment: "chaotic-good",
    level: 1,
    subclass: "",
    edition: "5e",
    hpMode: "fixed",
    hpCurrent: 0,
  },
  stats: {
    str: 10,
    dex: 14,
    con: 12,
    int: 15,
    wis: 10,
    cha: 8,
  },
  asi: {},
  spells: [], // <- –¥–æ–±–∞–≤–ª–µ–Ω–æ: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
};

// –ö–ª—é—á –¥–ª—è localStorage
const STORAGE_KEY = "dnd-ru-character";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
type CharacterContextType = {
  // –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  basics: Basics;
  stats: Abilities;
  asi: Record<number, AsiSelection>;

  // üîπ –°–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π (–∫–ª—é—á–∏)
  spells: string[];

  // –ú–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  setBasics: (patch: Partial<Basics>) => void;
  setName: (name: string) => void;
  setHpMode: (mode: HpMode) => void;
  setStat: (key: keyof Abilities, value: number) => void;
  choose: (patch: Partial<Basics>) => void; // –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è setBasics
  setLevel: (level: number) => void;
  setSubclass: (subclass: string) => void;

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  setAsiMode: (level: number, mode: AsiSelection["mode"]) => void;
  setAsiStats: (level: number, s1?: keyof Abilities, s2?: keyof Abilities) => void;
  setAsiFeat: (level: number, feat?: string) => void;

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –±–æ–Ω—É—Å–æ–≤
  setBackgroundBonuses: (bonuses: Partial<Record<keyof Abilities, number>>) => void;
  setBackgroundSkills: (skills: string[]) => void;
  setRaceBonuses: (bonuses: Partial<Record<keyof Abilities, number>>) => void;

  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–æ–π
  setRace: (race: string, subrace?: string, bonuses?: Partial<Record<keyof Abilities, number>>) => void;
  setSubrace: (subrace: string, bonuses?: Partial<Record<keyof Abilities, number>>) => void;
  clearRaceBonuses: () => void;

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º–∏
  addSpell: (key: string) => void;
  removeSpell: (key: string) => void;
  setSpells: (keys: string[]) => void;

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  save: () => void;
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const CharacterContext = createContext<CharacterContextType | null>(null);

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
export function CharacterProvider({ children }: { children: React.ReactNode }) {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const [draft, setDraft] = useState<CharacterDraft>(() => {
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
      const raw = localStorage.getItem(STORAGE_KEY);
      if (raw) {
        const saved = JSON.parse(raw) as CharacterDraft;
        // Ensure backwards compatibility of nested objects
        return {
          ...saved,
          basics: {
            ...saved.basics,
            raceBonuses: saved.basics.raceBonuses || {},
            backgroundBonuses: saved.basics.backgroundBonuses || {},
            backgroundSkills: saved.basics.backgroundSkills || [],
          },
          spells: saved.spells || [],
        };
      }
    } catch (error) {
      console.error("Error loading character from localStorage:", error);
    }
    return defaultDraft;
  });

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
  useEffect(() => {
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(draft));
    } catch (error) {
      console.error("Error saving character to localStorage:", error);
    }
  }, [draft]);

  // API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
  const api: CharacterContextType = useMemo(
    () => ({
      // –ì–µ—Ç—Ç–µ—Ä—ã
      basics: draft.basics,
      stats: draft.stats,
      asi: draft.asi,
      spells: draft.spells, // <- –¥–æ–±–∞–≤–ª–µ–Ω –≥–µ—Ç—Ç–µ—Ä –¥–ª—è spells

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      setBasics: (patch) =>
        setDraft((d) => ({
          ...d,
          basics: { ...d.basics, ...patch },
        })),

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏
      setName: (name) =>
        setDraft((d) => ({
          ...d,
          basics: { ...d.basics, name },
        })),

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–æ—Å–æ–±–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ö–∏—Ç–æ–≤
      setHpMode: (mode) =>
        setDraft((d) => ({
          ...d,
          basics: { ...d.basics, hpMode: mode },
        })),

      // –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è setBasics (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –≤—ã–±–æ—Ä–∞)
      choose: (patch) =>
        setDraft((d) => ({
          ...d,
          basics: { ...d.basics, ...patch },
        })),

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      setStat: (key, value) =>
        setDraft((d) => ({
          ...d,
          stats: { ...d.stats, [key]: value },
        })),

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è
      setLevel: (level) =>
        setDraft((d) => ({
          ...d,
          basics: { ...d.basics, level },
        })),

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–∫–ª–∞—Å—Å–∞
      setSubclass: (subclass) =>
        setDraft((d) => ({
          ...d,
          basics: { ...d.basics, subclass },
        })),

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ —É–ª—É—á—à–µ–Ω–∏—è (ASI –∏–ª–∏ —á–µ—Ä—Ç–∞)
      setAsiMode: (level, mode) =>
        setDraft((d) => {
          const prev = d.asi || {};
          const prevLevel = prev[level] || {};
          return {
            ...d,
            asi: { ...prev, [level]: { ...prevLevel, mode } },
          };
        }),

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è ASI
      setAsiStats: (level, s1, s2) =>
        setDraft((d) => {
          const prev = d.asi || {};
          const prevLevel = prev[level] || { mode: "asi" };
          return {
            ...d,
            asi: { ...prev, [level]: { ...prevLevel, mode: "asi", s1, s2 } },
          };
        }),

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —á–µ—Ä—Ç—ã
      setAsiFeat: (level, feat) =>
        setDraft((d) => {
          const prev = d.asi || {};
          const prevLevel = prev[level] || { mode: "feat" };
          return {
            ...d,
            asi: { ...prev, [level]: { ...prevLevel, mode: "feat", feat } },
          };
        }),

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ–Ω—É—Å–æ–≤ –æ—Ç –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏
      setBackgroundBonuses: (bonuses) =>
        setDraft((d) => ({
          ...d,
          basics: {
            ...d.basics,
            backgroundBonuses: { ...(d.basics.backgroundBonuses || {}), ...bonuses },
          },
        })),

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –æ—Ç –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏
      setBackgroundSkills: (skills) =>
        setDraft((d) => ({
          ...d,
          basics: {
            ...d.basics,
            backgroundSkills: skills,
          },
        })),

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ–Ω—É—Å–æ–≤ –æ—Ç —Ä–∞—Å—ã (–¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º)
      setRaceBonuses: (bonuses) =>
        setDraft((d) => ({
          ...d,
          basics: { ...d.basics, raceBonuses: { ...(d.basics.raceBonuses || {}), ...bonuses } },
        })),

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—ã —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥—Ä–∞—Å–æ–π –∏ –±–æ–Ω—É—Å–∞–º–∏
      setRace: (race, subrace, bonuses) =>
        setDraft((d) => ({
          ...d,
          basics: { ...d.basics, race, subrace, raceBonuses: bonuses ? { ...bonuses } : {} },
        })),

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥—Ä–∞—Å—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏
      setSubrace: (subrace, bonuses) =>
        setDraft((d) => ({
          ...d,
          basics: {
            ...d.basics,
            subrace,
            raceBonuses: bonuses ? { ...(d.basics.raceBonuses || {}), ...bonuses } : d.basics.raceBonuses,
          },
        })),

      // –û—á–∏—Å—Ç–∫–∞ —Ä–∞—Å–æ–≤—ã—Ö –±–æ–Ω—É—Å–æ–≤
      clearRaceBonuses: () =>
        setDraft((d) => ({
          ...d,
          basics: {
            ...d.basics,
            raceBonuses: {},
          },
        })),

      // üîπ –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º–∏
      addSpell: (key) =>
        setDraft((d) => ({
          ...d,
          spells: d.spells && d.spells.includes(key) ? d.spells : [...(d.spells || []), key],
        })),

      removeSpell: (key) =>
        setDraft((d) => ({
          ...d,
          spells: (d.spells || []).filter((s) => s !== key),
        })),

      setSpells: (keys) =>
        setDraft((d) => ({
          ...d,
          spells: [...keys],
        })),

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
      save: () => {
        try {
          localStorage.setItem(STORAGE_KEY, JSON.stringify(draft));
        } catch (error) {
          console.error("Error saving character:", error);
        }
      },
    }),
    [draft],
  );

  return (
    <CharacterContext.Provider value={api}>
      {children}
    </CharacterContext.Provider>
  );
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
export function useCharacter() {
  const ctx = useContext(CharacterContext);
  if (!ctx) {
    throw new Error("useCharacter must be used within a CharacterProvider");
  }
  return ctx;
}
